"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VeridaClientBase = void 0;
var web3_1 = require("@verida/web3");
var ethers_1 = require("ethers");
var vda_common_1 = require("@verida/vda-common");
var providers_1 = require("@ethersproject/providers");
var helpers_1 = require("@verida/helpers");
var VeridaClientBase = /** @class */ (function () {
    function VeridaClientBase(config, contractName) {
        if (!config.callType) {
            config.callType = 'web3';
        }
        this.config = config;
        this.readOnly = true;
        if (!config.web3Options) {
            config.web3Options = {};
        }
        this.blockchainAnchor = config.blockchainAnchor;
        if (config.callType == 'web3' && !config.web3Options.rpcUrl) {
            config.web3Options.rpcUrl = (0, vda_common_1.getDefaultRpcUrl)(this.blockchainAnchor);
        }
        var contractInfo = (0, vda_common_1.getContractInfoForBlockchainAnchor)(this.blockchainAnchor, contractName);
        if (config.did) {
            this.readOnly = false;
            var address = (0, helpers_1.explodeDID)(config.did).address;
            this.didAddress = address; //.toLowerCase()
            this.vdaWeb3Client = (0, web3_1.getVeridaContract)(config.callType, __assign(__assign(__assign({}, contractInfo), config.web3Options), { blockchainAnchor: this.blockchainAnchor }));
        }
        else {
            var rpcUrl = config.web3Options.rpcUrl;
            if (!rpcUrl) {
                rpcUrl = (0, vda_common_1.getDefaultRpcUrl)(this.blockchainAnchor);
            }
            var provider = new providers_1.JsonRpcProvider(rpcUrl);
            this.contract = new ethers_1.Contract(contractInfo.address, contractInfo.abi.abi, provider);
        }
    }
    return VeridaClientBase;
}());
exports.VeridaClientBase = VeridaClientBase;
//# sourceMappingURL=blockchainApi.js.map