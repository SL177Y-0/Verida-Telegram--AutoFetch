import { ServiceEndpoint } from 'did-resolver';
import { SecureContextEndpoint } from './DocumentInterfaces';
import { SecureContextConfig, SecureContextPublicKey } from './StorageLinkInterfaces';
import { DIDClientConfig, Network } from './NetworkInterfaces';
import { Web3CallType, Web3MetaTransactionConfig, Web3SelfTransactionConfig } from './Web3Interfaces';
export interface AccountConfig {
    defaultDatabaseServer: SecureContextEndpoint;
    defaultMessageServer: SecureContextEndpoint;
    defaultStorageServer?: SecureContextEndpoint;
    defaultNotificationServer?: SecureContextEndpoint;
}
export interface AuthContext {
    publicSigningKey: SecureContextPublicKey;
}
export interface AuthTypeConfig {
    force?: boolean;
}
export interface VeridaDatabaseAuthContext extends AuthContext {
    refreshToken?: string;
    accessToken?: string;
    endpointUri: ServiceEndpoint;
    host: string;
}
export interface VeridaDatabaseAuthTypeConfig extends AuthTypeConfig {
    deviceId?: string;
    endpointUri?: string;
    invalidAccessToken?: boolean;
}
export declare class ContextAuthorizationError extends Error {
    constructor(message: string);
}
export interface AccountNodeConfig {
    privateKey: string;
    network: Network;
    didClientConfig: AccountNodeDIDClientConfig;
    options?: any;
    countryCode?: string;
}
export type ContextSession = {
    did: string;
    contextName: string;
    signature: string;
    contextConfig: SecureContextConfig;
    contextAuths: Record<string, VeridaDatabaseAuthContext | undefined>;
};
export type SessionAccountConfig = {
    network: Network;
    contextSession: ContextSession;
};
/**
 * Client configuration required for AccountNode that will support creating a DID
 * on chain, if required
 */
export interface AccountNodeDIDClientConfig extends Omit<DIDClientConfig, 'network'> {
    callType: Web3CallType;
    web3Config: Web3SelfTransactionConfig | Web3MetaTransactionConfig;
    didEndpoints?: string[];
}
export interface WalletConnectConfig {
    version: string;
    uri: string;
    chainId: string;
}
export interface AccountVaultRequest {
    logoUrl?: string;
    openUrl?: string;
    walletConnect?: {
        version: number;
        uri: string;
        chainId: string;
    };
    userAgent?: string;
}
export interface AccountVaultConfig {
    serverUri?: string;
    loginUri?: string;
    canvasId?: string;
    schemeUri?: string;
    deeplinkId?: string;
    request?: AccountVaultRequest;
    network?: Network;
    callback?(response: AuthResponse): void;
    callbackRejected?(): void;
}
export interface AuthClientConfig {
    appName: string;
    serverUri: string;
    loginUri?: string;
    canvasId?: string;
    schemeUri?: string;
    deeplinkId?: string;
    request?: AccountVaultRequest;
    callback(response: AuthResponse): void;
    callbackRejected?(): void;
}
export interface AuthResponse {
    type: string;
    success: boolean;
    message: string;
}
