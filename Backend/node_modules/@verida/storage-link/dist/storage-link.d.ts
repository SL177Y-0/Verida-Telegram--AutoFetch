import { DIDClient } from "@verida/did-client";
import { DIDDocument as VeridaDIDDocument } from "@verida/did-document";
import { ServiceEndpoint } from 'did-resolver';
import { Network, IKeyring, SecureContextConfig, SecureContextEndpointType, VdaDidEndpointResponses } from "@verida/types";
/**
 * Class representing the link between a DID and Storage context
 */
export default class StorageLink {
    static getLinks(network: Network, didClient: DIDClient, did: string): Promise<SecureContextConfig[]>;
    /**
     *
     * @param didClient
     * @param did
     * @param contextName
     * @returns SecureStorageContextConfig | undefined (if not found)
     */
    static getLink(network: Network, didClient: DIDClient, did: string, context: string, contextIsName?: boolean): Promise<SecureContextConfig | undefined>;
    /**
     *
     * @param didClient
     * @param storageConfig (Must have .id as the contextName)
     */
    static setLink(network: Network, didClient: DIDClient, storageConfig: SecureContextConfig, keyring: IKeyring, privateKey: string): Promise<VdaDidEndpointResponses>;
    static setContextService(network: Network, didClient: DIDClient, contextName: string, endpointType: SecureContextEndpointType, serverType: string, endpointUris: string[]): Promise<VdaDidEndpointResponses>;
    static unlink(network: Network, didClient: DIDClient, contextName: string): Promise<VdaDidEndpointResponses | boolean>;
    static _findHash(contexts: any[], hash: string): SecureContextConfig | undefined;
    static buildSecureContexts(didDocument: VeridaDIDDocument, network?: Network, isLegacyDid?: boolean): SecureContextConfig[];
    /**
     * Ensure the URL has a trailing slash and appropriate port set
     *
     * @param endpoint ServiceEndpoint | ServiceEndpoint[]
     * @returns
     */
    static standardizeUrls(endpoints: ServiceEndpoint[]): ServiceEndpoint[];
}
