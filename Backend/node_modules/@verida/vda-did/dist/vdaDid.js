"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var ethers_1 = require("ethers");
var did_document_1 = require("@verida/did-document");
var encryption_utils_1 = require("@verida/encryption-utils");
var blockchainApi_1 = require("./blockchain/blockchainApi");
var vda_common_1 = require("@verida/vda-common");
var VdaDid = /** @class */ (function () {
    function VdaDid(options) {
        this.options = options;
        this.blockchain = new blockchainApi_1.default(options);
    }
    /**
     * Publish the first version of a DIDDocument to a list of endpoints.
     *
     * If an endpoint fails to accept the DID Document, that endpoint will be ignored and won't be included in the
     * list of valid endpoints on chain.
     *
     * @param didDocument
     * @param endpoints
     * @return VdaDidEndpointResponses Map of endpoints where the DID Document was successfully published
     */
    VdaDid.prototype.create = function (didDocument, endpoints, retries) {
        if (retries === void 0) { retries = 3; }
        return __awaiter(this, void 0, void 0, function () {
            var doc, promises, i, finalEndpoints, results, i, err_1, message, blockchainEntry, err_2, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.lastEndpointErrors = undefined;
                        if (!this.options.signKey) {
                            throw new Error("Unable to create DID: No private key specified in config.");
                        }
                        doc = didDocument.export();
                        if (doc.versionId !== 0) {
                            throw new Error("Unable to create DID: Document must be version 0 of the DID Document.");
                        }
                        if (endpoints.length === 0) {
                            throw new Error("Unable to create DID: No endpoints provided.");
                        }
                        if (!didDocument.id.match("did:vda:".concat(this.options.blockchain.toString()))) {
                            throw new Error("Unable to create DID: Blockchain in address doesn't match config");
                        }
                        // Sign the DID Document
                        didDocument.signProof(this.options.signKey);
                        promises = [];
                        for (i in endpoints) {
                            promises.push(axios_1.default.post("".concat(endpoints[i]), {
                                document: didDocument.export()
                            }));
                        }
                        finalEndpoints = {};
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 12]);
                        return [4 /*yield*/, Promise.all(promises)];
                    case 2:
                        results = _a.sent();
                        for (i in endpoints) {
                            finalEndpoints[endpoints[i]] = {
                                status: 'success'
                            };
                        }
                        return [3 /*break*/, 12];
                    case 3:
                        err_1 = _a.sent();
                        message = err_1.response ? (err_1.response.data.message ? err_1.response.data.message : err_1.response.data) : err_1.message;
                        if (!message.match('DID Document already exists')) return [3 /*break*/, 11];
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, , 10]);
                        return [4 /*yield*/, this.blockchain.lookup(didDocument.id)];
                    case 5:
                        blockchainEntry = _a.sent();
                        return [3 /*break*/, 10];
                    case 6:
                        err_2 = _a.sent();
                        // DID document exists on the nodes, but not on the blockchain -- this shouldn't happen
                        // but we will cleanup by removing from the nodes and trying again
                        return [4 /*yield*/, this.deleteFromEndpoints(endpoints)
                            // try again
                        ];
                    case 7:
                        // DID document exists on the nodes, but not on the blockchain -- this shouldn't happen
                        // but we will cleanup by removing from the nodes and trying again
                        _a.sent();
                        if (!(retries > 0)) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.create(didDocument, endpoints, retries--)];
                    case 8: return [2 /*return*/, _a.sent()];
                    case 9: return [3 /*break*/, 10];
                    case 10: 
                    // DID already exists, so use update instead
                    throw new Error('Unable to create DID: Already exists');
                    case 11: throw new Error("Unable to create DID: Endpoints failed to accept the DID Document (".concat(message, ")"));
                    case 12:
                        _a.trys.push([12, 14, , 16]);
                        return [4 /*yield*/, this.blockchain.register(endpoints)];
                    case 13:
                        _a.sent();
                        return [3 /*break*/, 16];
                    case 14:
                        err_3 = _a.sent();
                        // blockchain write failed, so roll back endpoint DID document storage on the endpoints
                        return [4 /*yield*/, this.deleteFromEndpoints(endpoints)];
                    case 15:
                        // blockchain write failed, so roll back endpoint DID document storage on the endpoints
                        _a.sent();
                        throw new Error("Unable to save DID to blockchain: ".concat(err_3.message));
                    case 16: return [2 /*return*/, finalEndpoints];
                }
            });
        });
    };
    /**
     * Publish an updated version of a DIDDocument to a list of endpoints.
     *
     * If an endpoint fails to accept the DID Document, that will be reflected in the response.
     *
     * Note: Any failed endpoints will remain on-chain and will need to have the update re-attempted or remove the endpoint from the DID Registry
     *
     * @param didDocument
     * @returns VdaDidEndpointResponses Map of endpoints where the DID Document was successfully published
     */
    VdaDid.prototype.update = function (didDocument, controllerPrivateKey) {
        return __awaiter(this, void 0, void 0, function () {
            var attributes, response, didInfo, updateController, pattern, currentController, match, didDocumentController, privateKeyAddress, promises, i, endpoint, results, finalEndpoints, successCount, failResponse, failEndpointUri, i, result, endpoint, err;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.lastEndpointErrors = undefined;
                        if (!this.options.signKey) {
                            throw new Error("Unable to update DID Document. No private key specified in config.");
                        }
                        attributes = didDocument.export();
                        if (attributes.created == attributes.updated) {
                            throw new Error("Unable to update DID Document. \"updated\" timestamp matches \"created\" timestamp.");
                        }
                        didDocument.signProof(this.options.signKey);
                        return [4 /*yield*/, this.blockchain.lookup(didDocument.id)];
                    case 1:
                        response = _a.sent();
                        didInfo = (0, vda_common_1.interpretIdentifier)(didDocument.id);
                        updateController = false;
                        pattern = /0x[a-fA-F0-9]{40}/;
                        currentController = response.didController.toLowerCase();
                        match = didDocument.export().controller.toLowerCase().match(pattern);
                        didDocumentController = match[0].toLowerCase();
                        // @ts-ignore
                        if (currentController !== didDocumentController) {
                            // Controller has changed, ensure we have a private key
                            if (!controllerPrivateKey) {
                                throw new Error("Unable to update DID Document. Changing controller, but \"controllerPrivateKey\" not specified.");
                            }
                            privateKeyAddress = ethers_1.ethers.utils.computeAddress(controllerPrivateKey).toLowerCase();
                            if (privateKeyAddress !== didDocumentController) {
                                throw new Error("Unable to update DID Document. Changing controller, but private key doesn't match controller in DID Document");
                            }
                            updateController = true;
                        }
                        promises = [];
                        for (i in response.endpoints) {
                            endpoint = response.endpoints[i];
                            promises.push(axios_1.default.put("".concat(endpoint), {
                                document: didDocument.export()
                            }));
                        }
                        return [4 /*yield*/, Promise.allSettled(promises)];
                    case 2:
                        results = _a.sent();
                        finalEndpoints = {};
                        successCount = 0;
                        failResponse = {};
                        failEndpointUri = '';
                        for (i in response.endpoints) {
                            result = results[i];
                            endpoint = response.endpoints[i];
                            if (result.status == 'rejected') {
                                err = result.reason // @todo: is this correct
                                ;
                                failResponse = {
                                    status: 'fail',
                                    message: err.response && err.response.data && err.response.data.message ? err.response.data.message : err.message
                                };
                                finalEndpoints[endpoint] = failResponse;
                                failEndpointUri = endpoint;
                            }
                            else {
                                finalEndpoints[endpoint] = {
                                    status: 'success'
                                };
                                successCount++;
                            }
                        }
                        if (successCount === 0) {
                            this.lastEndpointErrors = finalEndpoints;
                            throw new Error("Unable to update DID: All endpoints failed to accept the DID Document (".concat(failEndpointUri, ": ").concat(failResponse.message, ")"));
                        }
                        if (!updateController) return [3 /*break*/, 4];
                        // If the DID controller has changed, update on-chain via `setController()`
                        return [4 /*yield*/, this.blockchain.setController(controllerPrivateKey)];
                    case 3:
                        // If the DID controller has changed, update on-chain via `setController()`
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/, finalEndpoints];
                }
            });
        });
    };
    // @todo: make async for all endpoints
    VdaDid.prototype.deleteFromEndpoints = function (endpoints) {
        return __awaiter(this, void 0, void 0, function () {
            var did, nowInMinutes, proofString, privateKey, signature, promises, i, endpoint, results, finalEndpoints, successCount, i, endpoint, result, err;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        did = this.options.identifier.toLowerCase();
                        nowInMinutes = Math.round((new Date()).getTime() / 1000 / 60);
                        proofString = "Delete DID Document ".concat(did, " at ").concat(nowInMinutes);
                        privateKey = new Uint8Array(Buffer.from(this.options.signKey.substr(2), 'hex'));
                        signature = encryption_utils_1.default.signData(proofString, privateKey);
                        promises = [];
                        for (i in endpoints) {
                            endpoint = endpoints[i];
                            promises.push(axios_1.default.delete("".concat(endpoints[i]), {
                                headers: {
                                    signature: signature
                                }
                            }));
                        }
                        return [4 /*yield*/, Promise.allSettled(promises)];
                    case 1:
                        results = _a.sent();
                        finalEndpoints = {};
                        successCount = 0;
                        for (i in endpoints) {
                            endpoint = endpoints[i];
                            result = results[i];
                            if (result.status == 'rejected') {
                                err = result.reason // @todo: is this correct
                                ;
                                finalEndpoints[endpoint] = {
                                    status: 'fail',
                                    message: err.response && err.response.data && err.response.data.message ? err.response.data.message : err.message
                                };
                            }
                            else {
                                finalEndpoints[endpoint] = {
                                    status: 'success'
                                };
                                successCount++;
                            }
                        }
                        return [2 /*return*/, {
                                successCount: successCount,
                                finalEndpoints: finalEndpoints
                            }];
                }
            });
        });
    };
    VdaDid.prototype.delete = function () {
        return __awaiter(this, void 0, void 0, function () {
            var did, response, _a, successCount, finalEndpoints;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.options.signKey) {
                            throw new Error("Unable to delete DID. No private key specified in config.");
                        }
                        did = this.options.identifier.toLowerCase();
                        return [4 /*yield*/, this.blockchain.lookup(did)
                            // 1. Call revoke() on the DID registry
                        ];
                    case 1:
                        response = _b.sent();
                        // 1. Call revoke() on the DID registry
                        return [4 /*yield*/, this.blockchain.revoke()
                            // 2. Call DELETE on all endpoints
                        ];
                    case 2:
                        // 1. Call revoke() on the DID registry
                        _b.sent();
                        return [4 /*yield*/, this.deleteFromEndpoints(response.endpoints)];
                    case 3:
                        _a = _b.sent(), successCount = _a.successCount, finalEndpoints = _a.finalEndpoints;
                        if (successCount === 0) {
                            this.lastEndpointErrors = finalEndpoints;
                            throw new Error("Unable to delete DID: All endpoints failed to accept the delete request");
                        }
                        return [2 /*return*/, finalEndpoints];
                }
            });
        });
    };
    /**
     * Add a new to an existing DID
     *
     * @param endpointUri
     * @param verifyAllVersions
     */
    VdaDid.prototype.addEndpoint = function (endpointUri, verifyAllVersions) {
        if (verifyAllVersions === void 0) { verifyAllVersions = false; }
        return __awaiter(this, void 0, void 0, function () {
            var lookupResponse, endpoints, versions, versionHistory, i, proofString, signature, response, err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.options.signKey) {
                            throw new Error("Unable to create DID. No private key specified in config.");
                        }
                        return [4 /*yield*/, this.blockchain.lookup(this.options.identifier)];
                    case 1:
                        lookupResponse = _a.sent();
                        endpoints = lookupResponse.endpoints;
                        return [4 /*yield*/, this.fetchDocumentHistory(endpoints)];
                    case 2:
                        versions = _a.sent();
                        versionHistory = [];
                        for (i in versions) {
                            versionHistory.push(versions[i].export());
                        }
                        proofString = '';
                        signature = '';
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, axios_1.default.post("".concat(endpointUri, "/migrate"), {
                                versions: versionHistory,
                                signature: signature
                            })];
                    case 4:
                        response = _a.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        err_4 = _a.sent();
                        //console.error('addEndpoint error!!')
                        if (err_4.response) {
                            throw new Error("Unable to add endpoint. ".concat(err_4.response.data.message));
                        }
                        throw new Error("Unable to add endpoint. ".concat(err_4.message));
                    case 6:
                        endpoints.push(endpointUri);
                        // Update the blockchain
                        return [4 /*yield*/, this.blockchain.register(endpoints)];
                    case 7:
                        // Update the blockchain
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    // @todo: Implement
    VdaDid.prototype.removeEndpoint = function (did, endpoint) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.options.signKey) {
                    throw new Error("Unable to create DID. No private key specified in config.");
                }
                return [2 /*return*/];
            });
        });
    };
    VdaDid.prototype.getLastEndpointErrors = function () {
        return this.lastEndpointErrors;
    };
    VdaDid.prototype.fetchDocumentHistory = function (endpoints) {
        return __awaiter(this, void 0, void 0, function () {
            var documents, endpointVersions, _a, _b, _c, _i, i, endpointUri, response, j, version, doc, err_5;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        documents = [];
                        endpointVersions = {};
                        _a = endpoints;
                        _b = [];
                        for (_c in _a)
                            _b.push(_c);
                        _i = 0;
                        _d.label = 1;
                    case 1:
                        if (!(_i < _b.length)) return [3 /*break*/, 6];
                        _c = _b[_i];
                        if (!(_c in _a)) return [3 /*break*/, 5];
                        i = _c;
                        endpointUri = endpoints[i];
                        endpointVersions[endpointUri] = [];
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, axios_1.default.get("".concat(endpointUri, "?allVersions=true"))];
                    case 3:
                        response = _d.sent();
                        if (response.data.status == 'success') {
                            for (j in response.data.data.versions) {
                                version = response.data.data.versions[j];
                                doc = new did_document_1.DIDDocument(version);
                                endpointVersions[endpointUri].push(doc);
                            }
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        err_5 = _d.sent();
                        throw new Error("Unable to fetch DID Document history. ".concat(err_5.message));
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6: 
                    // @todo: check consensus
                    // Return consensus of versioned DID Document
                    return [2 /*return*/, endpointVersions[endpoints[0]]];
                }
            });
        });
    };
    return VdaDid;
}());
exports.default = VdaDid;
//# sourceMappingURL=vdaDid.js.map