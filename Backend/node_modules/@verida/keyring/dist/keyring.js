"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var encryption_utils_1 = __importDefault(require("@verida/encryption-utils"));
var tweetnacl_1 = require("tweetnacl");
var ethers_1 = require("ethers");
var types_1 = require("@verida/types");
/**
 * Class that takes a signature (generated from a signed consent message) and generates a
 * collection of asymmetric keys, symmetric key and signing key for a given secure storage
 * context.
 */
var Keyring = /** @class */ (function () {
    /**
     * A string used as a seed for this keyring.
     *
     * @param seed
     */
    function Keyring(seed) {
        this.storageContextKeys = {}; // @todo proper typing
        this.seed = seed;
    }
    Keyring.prototype.getKeys = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._init()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, {
                                asymPublicKey: this.asymKeyPair.publicKey,
                                asymPublicAddress: ethers_1.utils.computeAddress(this.asymKeyPair.publicKey),
                                asymPrivateKey: this.asymKeyPair.secretKey,
                                asymPrivateKeyHex: ethers_1.utils.hexlify(this.asymKeyPair.secretKey),
                                asymPublicKeyBase58: ethers_1.utils.base58.encode(this.asymKeyPair.publicKey),
                                asymPrivateKeyBase58: ethers_1.utils.base58.encode(this.asymKeyPair.secretKey),
                                asymPublicKeyHex: ethers_1.utils.hexlify(this.asymKeyPair.publicKey),
                                signPublicKey: this.signKeyPair.publicKey,
                                signPublicAddress: ethers_1.utils.computeAddress(this.signKeyPair.publicKey),
                                signPrivateKey: this.signKeyPair.secretKey,
                                signPrivateKeyHex: ethers_1.utils.hexlify(this.signKeyPair.secretKey),
                                signPublicKeyBase58: ethers_1.utils.base58.encode(this.signKeyPair.publicKey),
                                signPrivateKeyBase58: ethers_1.utils.base58.encode(this.signKeyPair.secretKey),
                                signPublicKeyHex: ethers_1.utils.hexlify(this.signKeyPair.publicKey),
                                symKey: this.symKey,
                                symKeyHex: ethers_1.utils.hexlify(this.symKey),
                                symKeyBase58: ethers_1.utils.base58.encode(this.symKey)
                            }];
                }
            });
        });
    };
    Keyring.prototype._init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, symmetricKey;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this.asymKeyPair) {
                            return [2 /*return*/];
                        }
                        _a = this;
                        return [4 /*yield*/, this.buildKey(this.seed, types_1.KeyringKeyType.ASYM)];
                    case 1:
                        _a.asymKeyPair = _c.sent();
                        _b = this;
                        return [4 /*yield*/, this.buildKey(this.seed, types_1.KeyringKeyType.SIGN)];
                    case 2:
                        _b.signKeyPair = _c.sent();
                        return [4 /*yield*/, this.buildKey(this.seed, types_1.KeyringKeyType.SYM)];
                    case 3:
                        symmetricKey = _c.sent();
                        this.symKey = symmetricKey.secretKey;
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Helper function that generates a key of the appropriate type
     *
     * @param seed
     * @param keyType
     * @returns
     */
    Keyring.prototype.buildKey = function (seed, keyType) {
        return __awaiter(this, void 0, void 0, function () {
            var inputMessage, hashBytes, hdnode, secretKey, publicKey;
            return __generator(this, function (_a) {
                inputMessage = "".concat(seed, "-").concat(keyType);
                hashBytes = encryption_utils_1.default.hashBytes(inputMessage);
                switch (keyType) {
                    case types_1.KeyringKeyType.SIGN:
                        hdnode = ethers_1.utils.HDNode.fromSeed(hashBytes);
                        secretKey = ethers_1.utils.zeroPad(hdnode.privateKey, 32);
                        publicKey = ethers_1.utils.zeroPad(hdnode.publicKey, 33);
                        return [2 /*return*/, {
                                secretKey: secretKey,
                                publicKey: publicKey
                            }];
                    case types_1.KeyringKeyType.ASYM:
                        return [2 /*return*/, tweetnacl_1.box.keyPair.fromSecretKey(hashBytes)];
                    case types_1.KeyringKeyType.SYM:
                        return [2 /*return*/, tweetnacl_1.box.keyPair.fromSecretKey(hashBytes)];
                    default:
                        throw new Error('Unknown key type specified');
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Generate an object containing all the public keys for this Keyring
     *
     * @returns
     */
    Keyring.prototype.publicKeys = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._init()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, {
                                asymPublicKey: this.asymKeyPair.publicKey,
                                asymPublicKeyHex: ethers_1.utils.hexlify(this.asymKeyPair.publicKey),
                                asymPublicKeyBase58: ethers_1.utils.base58.encode(this.asymKeyPair.publicKey),
                                signPublicKey: this.signKeyPair.publicKey,
                                signPublicKeyHex: ethers_1.utils.hexlify(this.signKeyPair.publicKey),
                                signPublicKeyBase58: ethers_1.utils.base58.encode(this.signKeyPair.publicKey)
                            }];
                }
            });
        });
    };
    Keyring.prototype.sign = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._init()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, encryption_utils_1.default.signData(data, this.signKeyPair.secretKey)];
                }
            });
        });
    };
    Keyring.prototype.verifySig = function (data, sig) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._init()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, encryption_utils_1.default.verifySig(data, sig, ethers_1.utils.hexlify(this.signKeyPair.publicKey))];
                }
            });
        });
    };
    Keyring.prototype.symEncrypt = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._init()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, encryption_utils_1.default.symEncrypt(data, this.symKey)];
                }
            });
        });
    };
    Keyring.prototype.symDecrypt = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._init()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, encryption_utils_1.default.symDecrypt(data, this.symKey)];
                }
            });
        });
    };
    Keyring.prototype.asymEncrypt = function (data, secretOrSharedKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._init()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, encryption_utils_1.default.asymEncrypt(data, secretOrSharedKey)];
                }
            });
        });
    };
    Keyring.prototype.asymDecrypt = function (messageWithNonce, secretOrSharedKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._init()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, encryption_utils_1.default.asymDecrypt(messageWithNonce, secretOrSharedKey)];
                }
            });
        });
    };
    Keyring.prototype.buildSharedKeyStart = function (privateKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._init()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, tweetnacl_1.box.before(this.asymKeyPair.publicKey, privateKey)];
                }
            });
        });
    };
    Keyring.prototype.buildSharedKeyEnd = function (publicKey) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._init()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, tweetnacl_1.box.before(publicKey, this.asymKeyPair.secretKey)];
                }
            });
        });
    };
    Keyring.prototype.getSeed = function () {
        return this.seed;
    };
    Keyring.prototype.getStorageContextKey = function (databaseName) {
        return __awaiter(this, void 0, void 0, function () {
            var consent, signature, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (this.storageContextKeys[databaseName]) {
                            return [2 /*return*/, this.storageContextKeys[databaseName]];
                        }
                        consent = "Authorized to own database: ".concat(databaseName);
                        return [4 /*yield*/, this.sign(consent)];
                    case 1:
                        signature = _c.sent();
                        // Create a deterministic symmetric key for this database
                        _a = this.storageContextKeys;
                        _b = databaseName;
                        return [4 /*yield*/, this.buildKey(signature, types_1.KeyringKeyType.SYM)];
                    case 2:
                        // Create a deterministic symmetric key for this database
                        _a[_b] = _c.sent();
                        return [2 /*return*/, this.storageContextKeys[databaseName]];
                }
            });
        });
    };
    return Keyring;
}());
exports.default = Keyring;
//# sourceMappingURL=keyring.js.map