import nacl from 'tweetnacl';
import { IKeyring, KeyringPublicKeys } from '@verida/types';
/**
 * Class that takes a signature (generated from a signed consent message) and generates a
 * collection of asymmetric keys, symmetric key and signing key for a given secure storage
 * context.
 */
export default class Keyring implements IKeyring {
    asymKeyPair?: nacl.BoxKeyPair;
    signKeyPair?: nacl.SignKeyPair;
    symKey?: Uint8Array;
    private seed;
    private storageContextKeys;
    /**
     * A string used as a seed for this keyring.
     *
     * @param seed
     */
    constructor(seed: string);
    getKeys(): Promise<any>;
    _init(): Promise<void>;
    /**
     * Helper function that generates a key of the appropriate type
     *
     * @param seed
     * @param keyType
     * @returns
     */
    private buildKey;
    /**
     * Generate an object containing all the public keys for this Keyring
     *
     * @returns
     */
    publicKeys(): Promise<KeyringPublicKeys>;
    sign(data: any): Promise<string>;
    verifySig(data: string, sig: string): Promise<boolean>;
    symEncrypt(data: string): Promise<string>;
    symDecrypt(data: string): Promise<any>;
    asymEncrypt(data: string, secretOrSharedKey: Uint8Array): Promise<string>;
    asymDecrypt(messageWithNonce: string, secretOrSharedKey: Uint8Array): Promise<any>;
    buildSharedKeyStart(privateKey: Uint8Array): Promise<Uint8Array>;
    buildSharedKeyEnd(publicKey: Uint8Array): Promise<Uint8Array>;
    getSeed(): string;
    getStorageContextKey(databaseName: string): Promise<any>;
}
