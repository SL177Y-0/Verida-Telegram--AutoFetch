import { DIDResolutionOptions, DIDResolutionResult, DIDResolver, DIDDocument, ParsedDID, Resolvable } from "did-resolver";
import { Web3ResolverConfigurationOptions } from '@verida/types';
/**
 * Create a VdaDidResolver instance and return it
 * @param options Configurations
 * @returns VdaDidResolver instance
 */
export declare function getResolver(options?: Web3ResolverConfigurationOptions): Record<string, DIDResolver>;
export declare class VdaDidResolver {
    private options;
    private defaultTimeout;
    constructor(options: Web3ResolverConfigurationOptions);
    /** Resolve a DIDDocument from a DID */
    resolve(did: string, parsed: ParsedDID, _unused: Resolvable, options: DIDResolutionOptions): Promise<DIDResolutionResult>;
    /**
     * Resolve a DID Document
     *
     * For performance, the latest version is fetched from endpoint. It is possible to fetch all versions
     * and verify them by using the `fullVerification` query param.
     *
     * Supports query parameters:
     *
     * `timestamp`: Return DID document that was valid at the specified timestamp
     * `fullVerification`: Verify every copy of the DID document instead of using consensus
     *
     * @param parsed
     */
    _resolve(parsed: any): Promise<DIDDocument>;
    /**
     * Fetch the latest DIDDocument stored at each endpoint
     *
     * @param endpoints
     */
    private fetchDocuments;
    build(): Record<string, DIDResolver>;
}
