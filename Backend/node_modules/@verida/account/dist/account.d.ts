import { Keyring } from '@verida/keyring';
import { AccountConfig, AuthContext, AuthTypeConfig, IAccount, SecureContextConfig } from '@verida/types';
/**
 * An Authenticator that automatically signs everything
 */
export default class Account implements IAccount {
    /**
     * Generate a keyring for this user for a given storage context.
     *
     * @param contextName
     */
    keyring(contextName: string): Promise<Keyring>;
    /**
     * Sign a string as the current user
     *
     * @param input
     */
    sign(input: string): Promise<string>;
    /**
     * Get the DID of the current user
     */
    did(): Promise<string>;
    /**
     * Link storage to this user
     *
     * @param storageConfig
     */
    linkStorage(storageConfig: SecureContextConfig): Promise<boolean>;
    /**
     * Unlink storage for this user
     *
     * @param contextName
     */
    unlinkStorage(contextName: string): Promise<boolean>;
    storageConfig(contextName: string, forceCreate?: boolean): Promise<SecureContextConfig | undefined>;
    linkStorageContextService(contextName: string, endpointType: string, serverType: string, endpointUris: string[]): Promise<boolean>;
    setAccountConfig(accountConfig: AccountConfig): void;
    /**
     * Create a DID-JWT from a data object
     * @param {*} data
     */
    createDidJwt(contextName: string, data: object, config?: any): Promise<string>;
    /**
     * An optional method that can be used to disconnect the current user.
     *
     * For example, in a web browser context, it would remove any stored signatures from local storage.
     */
    disconnect(contextName?: string): Promise<void>;
    getAuthContext(contextName: string, contextConfig: SecureContextConfig, authConfig?: AuthTypeConfig, authType?: string): Promise<AuthContext>;
    disconnectDevice(contextName: string, deviceId?: string): Promise<boolean>;
}
