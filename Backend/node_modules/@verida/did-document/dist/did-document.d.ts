import { ServiceEndpoint, Service } from 'did-resolver';
import { IDIDDocument, IKeyring, Network, SecureContextEndpoints, SecureContextEndpointType, VeridaDocInterface } from '@verida/types';
export default class DIDDocument implements IDIDDocument {
    private doc;
    protected errors: string[];
    /**
     * Force lower case DID as we can't guarantee the DID will always be provided with checksum
     *
     * @param doc - this value can be a DocInterface or DID.
     */
    constructor(doc: VeridaDocInterface | string, publicKeyHex?: string);
    get id(): string;
    getErrors(): string[];
    /**
     * Not used directly, used for testing
     *
     * @param contextName string
     * @param keyring Keyring
     * @param privateKey Private key of the DID that controls this DID Document
     * @param endpoints Endpoints
     */
    addContext(network: Network, contextName: string, keyring: IKeyring, privateKey: string, endpoints: SecureContextEndpoints): Promise<void>;
    /**
     * Remove the context from the DID document
     *
     * @param contextName
     * @param network
     * @returns
     */
    removeContext(contextName: string, network?: Network): boolean;
    setAttributes(attributes: Record<string, any>): void;
    import(doc: VeridaDocInterface): void;
    export(): VeridaDocInterface;
    addContextService(network: Network, contextHash: string, endpointType: SecureContextEndpointType, serviceType: string, endpointUris: ServiceEndpoint[]): void;
    addContextSignKey(network: Network, contextHash: string, publicKeyHex: string, proof: string): void;
    addContextAsymKey(network: Network, contextHash: string, publicKeyHex: string): void;
    verifySig(data: any, signature: string): boolean;
    verifyContextSignature(data: any, network: Network, contextName: string, signature: string, contextIsHash?: boolean): boolean;
    static generateContextHash(did: string, contextName: string): string;
    locateServiceEndpoint(contextName: string, endpointType: SecureContextEndpointType, network?: Network): Service | undefined;
    locateContextProof(contextName: string, network?: Network): string | undefined;
    signProof(privateKey: Uint8Array | string): void;
    verifyProof(): boolean;
    private getProofData;
    buildTimestamp(date: Date): string;
}
