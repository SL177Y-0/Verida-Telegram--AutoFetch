"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var did_jwt_1 = require("did-jwt");
var _ = require('lodash');
/**
 * An Authenticator that automatically signs everything
 */
var Account = /** @class */ (function () {
    function Account() {
    }
    /**
     * Generate a keyring for this user for a given storage context.
     *
     * @param contextName
     */
    Account.prototype.keyring = function (contextName) {
        throw new Error("Not implemented");
    };
    /**
     * Sign a string as the current user
     *
     * @param input
     */
    Account.prototype.sign = function (input) {
        throw new Error("Not implemented");
    };
    /**
     * Get the DID of the current user
     */
    Account.prototype.did = function () {
        throw new Error("Not implemented");
    };
    /**
     * Link storage to this user
     *
     * @param storageConfig
     */
    Account.prototype.linkStorage = function (storageConfig) {
        throw new Error("Not implemented");
    };
    /**
     * Unlink storage for this user
     *
     * @param contextName
     */
    Account.prototype.unlinkStorage = function (contextName) {
        throw new Error("Not implemented");
    };
    Account.prototype.storageConfig = function (contextName, forceCreate) {
        if (forceCreate === void 0) { forceCreate = false; }
        throw new Error("Not implemented");
    };
    Account.prototype.linkStorageContextService = function (contextName, endpointType, serverType, endpointUris) {
        throw new Error("Not implemented");
    };
    Account.prototype.setAccountConfig = function (accountConfig) {
        throw new Error("Not implemented");
    };
    /**
     * Create a DID-JWT from a data object
     * @param {*} data
     */
    Account.prototype.createDidJwt = function (contextName, data, config) {
        if (config === void 0) { config = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var keyring, keys, signer, did, jwt;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = _.merge({
                            expiry: null,
                            insertedAt: (new Date()).toISOString()
                        }, config);
                        return [4 /*yield*/, this.keyring(contextName)];
                    case 1:
                        keyring = _a.sent();
                        return [4 /*yield*/, keyring.getKeys()];
                    case 2:
                        keys = _a.sent();
                        signer = (0, did_jwt_1.ES256KSigner)(keys.signPrivateKey);
                        return [4 /*yield*/, this.did()];
                    case 3:
                        did = _a.sent();
                        return [4 /*yield*/, (0, did_jwt_1.createJWT)({
                                aud: did,
                                exp: config.expiry,
                                data: data,
                                context: contextName,
                                insertedAt: config.insertedAt
                            }, {
                                alg: 'ES256K',
                                issuer: did,
                                signer: signer
                            })];
                    case 4:
                        jwt = _a.sent();
                        return [2 /*return*/, jwt];
                }
            });
        });
    };
    /**
     * An optional method that can be used to disconnect the current user.
     *
     * For example, in a web browser context, it would remove any stored signatures from local storage.
     */
    Account.prototype.disconnect = function (contextName) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    Account.prototype.getAuthContext = function (contextName, contextConfig, authConfig, authType) {
        if (authConfig === void 0) { authConfig = {
            force: false
        }; }
        if (authType === void 0) { authType = "database"; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error("Not implemented.");
            });
        });
    };
    Account.prototype.disconnectDevice = function (contextName, deviceId) {
        if (deviceId === void 0) { deviceId = "Test device"; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error("Not implemented.");
            });
        });
    };
    return Account;
}());
exports.default = Account;
//# sourceMappingURL=account.js.map