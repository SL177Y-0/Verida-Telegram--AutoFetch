"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var client_1 = __importDefault(require("./client"));
var helpers_1 = require("@verida/helpers");
/**
 * @category
 * Modules
 */
var Network = /** @class */ (function () {
    function Network() {
        this.rpcUrls = {};
    }
    Network.prototype.setRpcUrls = function (rpcUrls) {
        this.rpcUrls = rpcUrls;
    };
    /**
     * Opens a new application context to provide encrypted storage and messaging to an application.
     *
     * This is a quicker alternative to generating a `client` connection to the Verida network
     * and then opening a context.
     *
     * @param config NetworkConnectionConfig Configuration
     * @returns {Context | undefined} If the user logs in a valid `Context` object is returned. If an unexpected error occurs or the user cancels the login attempt then nothing is returned.
     */
    Network.prototype.connect = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var client, context_1, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        client = new client_1.default(config.client ? config.client : {});
                        return [4 /*yield*/, client.connect(config.account)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, client.openContext(config.context.name, config.context.forceCreate)];
                    case 3:
                        context_1 = _a.sent();
                        return [2 /*return*/, context_1];
                    case 4:
                        err_1 = _a.sent();
                        // User may have cancelled the login attempt
                        return [2 /*return*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    Network.prototype.getRecord = function (veridaUri, encoded) {
        if (encoded === void 0) { encoded = false; }
        return __awaiter(this, void 0, void 0, function () {
            var urlParts, clientConfig, _i, _a, blockchain, client, record;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (encoded) {
                            veridaUri = (0, helpers_1.decodeUri)(veridaUri);
                        }
                        urlParts = (0, helpers_1.explodeVeridaUri)(veridaUri);
                        clientConfig = {
                            network: urlParts.network
                        };
                        // Set custom RPC URL if required
                        for (_i = 0, _a = Object.keys(this.rpcUrls); _i < _a.length; _i++) {
                            blockchain = _a[_i];
                            if (urlParts.did.match(blockchain)) {
                                clientConfig.didClientConfig = {
                                    rpcUrl: this.rpcUrls[blockchain],
                                    blockchain: blockchain
                                };
                                break;
                            }
                        }
                        client = new client_1.default(clientConfig);
                        return [4 /*yield*/, (0, helpers_1.fetchVeridaUri)(veridaUri, client)];
                    case 1:
                        record = _b.sent();
                        return [2 /*return*/, record];
                }
            });
        });
    };
    return Network;
}());
exports.default = new Network();
//# sourceMappingURL=network.js.map