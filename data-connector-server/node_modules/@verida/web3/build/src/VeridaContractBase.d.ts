import { BigNumber, Contract, Signer } from 'ethers';
import { VdaTransactionResult, VeridaWeb3Config, Web3CallType, Web3GasConfiguration, Web3GaslessPostConfig, Web3GaslessRequestConfig, Web3SelfTransactionConfig } from '@verida/types';
export type address = string;
export type uint256 = BigNumber;
export type BlockTag = string | number;
/**
 * Class representing any Verida Smart Contrat
 */
export declare class VeridaContract {
    /** Smart contract interaction mode */
    protected type: Web3CallType;
    /** Contract instance used in web3 mode */
    protected contract?: Contract;
    /** Signer for transactions */
    protected signer?: Signer;
    /** Axios instance used in gasless mode */
    protected server: any;
    /** endpoint url : Need to be defined in sub class constructor */
    protected endPoint?: string;
    /** Need such fields to add sub methods in constructor */
    [key: string]: any;
    /** Configuration for web3 mode */
    protected web3Config?: Web3SelfTransactionConfig;
    /** Configuration for gasless mode */
    protected gaslessServerConfig?: Web3GaslessRequestConfig;
    protected gaslessPostConfig?: Web3GaslessPostConfig;
    /**
     * Create Verida smart contract instance. Add member functions of contract as parameters.
     * @param type - interaction mode
     * @param config - configuration for creating VeridaContract instance
     */
    constructor(type: Web3CallType, config: VeridaWeb3Config);
    /**
     * Connect signer to contract to sign transactions. Called in web3 mode only
     *
     * @param controller : Wallet public address
     */
    protected attachContract(controller?: address | Promise<address>): Promise<Contract>;
    /**
     * Perform smart contract interaction. Called by member function that were created in constructor.
     * @param methodName - Calling method name of smart contract. From ABI.
     * @param methodType - Method type. Shows whether method in smart contract is Call function or not.
     * @param params - Parameters used to make interaction with smart contract : Array
     * @param gasConfig - Gas configuration. Only available for non-view functions in Web3 mode
     * @returns - Response from smart contract interaction
     */
    protected callMethod: (methodName: string, methodType: string, params: any, gasConfig?: Web3GasConfiguration) => Promise<VdaTransactionResult>;
}
