"use strict";
/* eslint-disable prettier/prettier */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkEIP1559Enabled = exports.getMaticFee = exports.isVeridaContract = exports.stringToBytes32 = void 0;
var constants_1 = require("./constants");
var ethers_1 = require("ethers");
var axios_1 = __importDefault(require("axios"));
/**
 * Convert string to 32Bytes value
 * @param str Input string
 * @returns {string} 32bytes value
 */
function stringToBytes32(str) {
    var buffStr = '0x' + Buffer.from(str).slice(0, 32).toString('hex');
    return buffStr + '0'.repeat(66 - buffStr.length);
}
exports.stringToBytes32 = stringToBytes32;
/**
 * Check contract address is Verida contract
 * @param contractAddress - Input contract address
 * @returns {boolean} - true if verida contract
 */
function isVeridaContract(contractAddress) {
    return constants_1.veridaContractWhiteList.includes(contractAddress.toLowerCase());
}
exports.isVeridaContract = isVeridaContract;
/**
 * Get Polygon fee data to send the transactions
 * @param gasStationUrl Gas station url to pull the gas inforamtion
 * @returns Matic fee data
 */
function getMaticFee(gasStationUrl, mode) {
    return __awaiter(this, void 0, void 0, function () {
        var maxFeePerGas, maxPriorityFeePerGas, data, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    maxFeePerGas = ethers_1.ethers.BigNumber.from(40000000000);
                    maxPriorityFeePerGas = ethers_1.ethers.BigNumber.from(40000000000);
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, (0, axios_1.default)({
                            method: 'get',
                            url: gasStationUrl
                        })];
                case 2:
                    data = (_b.sent()).data;
                    maxFeePerGas = ethers_1.ethers.utils.parseUnits(Math.ceil(data[mode].maxFee) + '', 'gwei');
                    maxPriorityFeePerGas = ethers_1.ethers.utils.parseUnits(Math.ceil(data[mode].maxPriorityFee) + '', 'gwei');
                    return [3 /*break*/, 4];
                case 3:
                    _a = _b.sent();
                    // ignore
                    console.log('Error in get gasfee from gas station url');
                    return [3 /*break*/, 4];
                case 4: 
                // return { maxFeePerGas, maxPriorityFeePerGas, gasLimit };
                return [2 /*return*/, { maxFeePerGas: maxFeePerGas, maxPriorityFeePerGas: maxPriorityFeePerGas }];
            }
        });
    });
}
exports.getMaticFee = getMaticFee;
function checkEIP1559Enabled(provider, chainUrl) {
    return __awaiter(this, void 0, void 0, function () {
        var blockNumber, block;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (provider === undefined) {
                        if (chainUrl === undefined) {
                            return [2 /*return*/, false];
                        }
                        provider = new ethers_1.ethers.providers.JsonRpcProvider(chainUrl);
                    }
                    return [4 /*yield*/, provider.getBlockNumber()];
                case 1:
                    blockNumber = _a.sent();
                    return [4 /*yield*/, provider.getBlock(blockNumber)];
                case 2:
                    block = _a.sent();
                    return [2 /*return*/, block.baseFeePerGas !== undefined];
            }
        });
    });
}
exports.checkEIP1559Enabled = checkEIP1559Enabled;
// export async function getMaticFee(isProd: boolean) {
//   let maxFeePerGas = ethers.BigNumber.from(40000000000); // fallback to 40 gwei
//   let maxPriorityFeePerGas = ethers.BigNumber.from(40000000000); // fallback to 40 gwei
//   const gasLimit = ethers.BigNumber.from(50000000000); // fallback to 50 gwei
//   const EXTRA_TIP_FOR_MINER = 100 //  gwei
//   try {
//     const { data } = await Axios({
//       method: 'get',
//       url: isProd
//         ? 'https://gasstation-mainnet.matic.network/v2'
//         : 'https://gasstation-mumbai.matic.today/v2',
//     });
//     console.log('//////////////', data);
//     const base_fee = parseFloat(data.estimatedBaseFee)
//     const max_priority_fee = data.fast.maxPriorityFee + EXTRA_TIP_FOR_MINER;
//     let max_fee_per_gas = base_fee + max_priority_fee
//     //  In case the network gets (up to 25%) more congested
//     max_fee_per_gas += (base_fee * 0.15)
//     //  cast gwei numbers to wei BigNumbers for ethers
//     maxFeePerGas = ethers.utils.parseUnits(max_fee_per_gas.toFixed(9), 'gwei')
//     maxPriorityFeePerGas = ethers.utils.parseUnits(max_priority_fee.toFixed(9), 'gwei')
//   } catch {
//     // ignore
//     console.log('Error in get gasfee');
//   }
//   return { maxFeePerGas, maxPriorityFeePerGas };
// }
//# sourceMappingURL=utils.js.map