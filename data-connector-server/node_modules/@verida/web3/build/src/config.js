"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContractInstance = exports.isVeridaWeb3GasConfiguration = void 0;
/* eslint-disable prettier/prettier */
var bignumber_1 = require("@ethersproject/bignumber");
var ethers_1 = require("ethers");
var providers_1 = require("@ethersproject/providers");
var vda_common_1 = require("@verida/vda-common");
/**
 * Check whether parameter contains gas configuration option
 * @param obj parameter to be checked
 * @returns true if contains, otherwise false
 */
function isVeridaWeb3GasConfiguration(obj) {
    return ('maxFeePerGas' in obj)
        || ('maxPriorityFeePerGas' in obj)
        || ('gasLimit' in obj)
        || ('gasPrice' in obj)
        || ('eip1559Mode' in obj)
        || ('eip1559gasStationUrl' in obj);
}
exports.isVeridaWeb3GasConfiguration = isVeridaWeb3GasConfiguration;
/**
 * Returns Contract class instance of ethers library
 * This is used in web3 mode only - self transaction mode.
 *
 * @param conf Provider configuration to
 * @returns Contract instance
 */
function getContractInstance(conf) {
    var provider = conf.provider;
    if (!provider) {
        if (conf.rpcUrl) {
            if (!conf.chainId && !conf.blockchainAnchor) {
                throw new Error('Should provide \'chainId\' or \'blockchainAnchor\' in the configuration');
            }
            var chainIdRaw = conf.chainId;
            if (!chainIdRaw) {
                chainIdRaw = vda_common_1.BLOCKCHAIN_CHAINIDS[conf.blockchainAnchor];
            }
            var chainId = chainIdRaw ? bignumber_1.BigNumber.from(chainIdRaw).toNumber() : chainIdRaw;
            provider = new providers_1.JsonRpcProvider(conf.rpcUrl, chainId || 'any');
        }
        else {
            throw new Error('Should provide \'rpcUrl\' in the configuration');
        }
    }
    var contract = new ethers_1.Contract(conf.address, conf.abi.abi, provider);
    return contract;
}
exports.getContractInstance = getContractInstance;
//# sourceMappingURL=config.js.map