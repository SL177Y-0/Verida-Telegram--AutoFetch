"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VeridaContract = void 0;
/* eslint-disable prettier/prettier */
var axios_1 = __importDefault(require("axios"));
var utils_1 = require("./utils");
var config_1 = require("./config");
var ethers_1 = require("ethers");
/** Create axios instance to make http requests to meta-transaction-server */
var getAxios = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var config;
    return __generator(this, function (_a) {
        config = {};
        if (params.headers) {
            config.headers = params.headers;
        }
        return [2 /*return*/, axios_1.default.create(config)];
    });
}); };
/**
 * Class representing any Verida Smart Contrat
 */
var VeridaContract = /** @class */ (function () {
    /**
     * Create Verida smart contract instance. Add member functions of contract as parameters.
     * @param type - interaction mode
     * @param config - configuration for creating VeridaContract instance
     */
    function VeridaContract(type, config) {
        var _this = this;
        var _a, _b, _c;
        // Gasless mode variables
        /** Axios instance used in gasless mode */
        this.server = null;
        /**
         * Perform smart contract interaction. Called by member function that were created in constructor.
         * @param methodName - Calling method name of smart contract. From ABI.
         * @param methodType - Method type. Shows whether method in smart contract is Call function or not.
         * @param params - Parameters used to make interaction with smart contract : Array
         * @param gasConfig - Gas configuration. Only available for non-view functions in Web3 mode
         * @returns - Response from smart contract interaction
         */
        this.callMethod = function (methodName, methodType, params, gasConfig) { return __awaiter(_this, void 0, void 0, function () {
            var ret, contract, transaction, transactionReceipt, e_1, reason, _a, url, response;
            var _b, _c, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        if (!(this.type === 'web3')) return [3 /*break*/, 13];
                        ret = void 0;
                        return [4 /*yield*/, this.attachContract()
                            // console.log('Contract = ', contract)
                        ];
                    case 1:
                        contract = _e.sent();
                        _e.label = 2;
                    case 2:
                        _e.trys.push([2, 11, , 12]);
                        if (!(methodType === 'view' || methodType === 'pure')) return [3 /*break*/, 4];
                        return [4 /*yield*/, (_b = contract.callStatic)[methodName].apply(_b, params)];
                    case 3:
                        ret = _e.sent();
                        return [3 /*break*/, 10];
                    case 4:
                        if (!this.signer) {
                            throw new Error("No 'signer' or 'privateKey' in the configuration");
                        }
                        transaction = void 0;
                        if (!(gasConfig === undefined || Object.keys(gasConfig).length === 0)) return [3 /*break*/, 6];
                        return [4 /*yield*/, (_c = contract.functions)[methodName].apply(_c, params)];
                    case 5:
                        transaction = _e.sent();
                        return [3 /*break*/, 8];
                    case 6: return [4 /*yield*/, (_d = contract.functions)[methodName].apply(_d, __spreadArray(__spreadArray([], params, false), [gasConfig], false))];
                    case 7:
                        transaction = _e.sent();
                        _e.label = 8;
                    case 8: return [4 /*yield*/, transaction.wait()
                        // console.log("transactionReceipt : ", transactionReceipt);
                    ];
                    case 9:
                        transactionReceipt = _e.sent();
                        // console.log("transactionReceipt : ", transactionReceipt);
                        ret = transactionReceipt;
                        _e.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        e_1 = _e.sent();
                        reason = e_1.reason ? e_1.reason : 'Unknown';
                        reason = e_1.error && e_1.error.reason ? e_1.error.reason : reason;
                        reason = reason.replace('execution reverted: ', '');
                        if (reason === 'Unknown' && e_1.errorName) {
                            reason = e_1.errorName;
                        }
                        return [2 /*return*/, Promise.resolve({
                                success: false,
                                error: e_1.toString(),
                                errorObj: e_1,
                                reason: reason
                            })];
                    case 12: 
                    // Overflow error in `vda-node-manager` to get node issue fee.
                    // if (BigNumber.isBigNumber(ret)) ret = ret.toNumber()
                    return [2 /*return*/, {
                            success: true,
                            data: ret
                        }];
                    case 13:
                        if (!(this.server === null)) return [3 /*break*/, 15];
                        _a = this;
                        return [4 /*yield*/, getAxios(this.gaslessServerConfig)];
                    case 14:
                        _a.server = _e.sent();
                        _e.label = 15;
                    case 15:
                        url = "".concat(this.endPoint, "/").concat(methodName);
                        return [4 /*yield*/, this.server.post(url, params, this.gaslessPostConfig)];
                    case 16:
                        response = _e.sent();
                        return [2 /*return*/, response.data];
                }
            });
        }); };
        this.type = type;
        if (type === 'web3') {
            if (!config) {
                throw new Error('Input configuration parameters');
            }
            var web3Config = config;
            if (web3Config.provider || ((_a = web3Config.signer) === null || _a === void 0 ? void 0 : _a.provider) || web3Config.rpcUrl) {
                // console.log("VeridaContractBase : ", config);
                var provider = (_b = web3Config.provider) !== null && _b !== void 0 ? _b : (_c = web3Config.signer) === null || _c === void 0 ? void 0 : _c.provider;
                this.contract = (0, config_1.getContractInstance)({
                    provider: provider,
                    blockchainAnchor: web3Config.blockchainAnchor,
                    rpcUrl: web3Config.rpcUrl,
                    chainId: web3Config.chainId,
                    abi: config.abi,
                    address: config.address,
                });
            }
            else {
                throw new Error('either provider or rpcUrl is required to initialize');
            }
            this.signer = web3Config.signer;
            if (!this.signer && web3Config.privateKey) {
                this.signer = new ethers_1.Wallet(web3Config.privateKey, this.contract.provider);
            }
            // if(this.signer) {
            //     this.contract = this.contract!.connect(this.signer);
            // }
            var methods = config.abi.abi;
            methods.forEach(function (item) {
                if (item.type === 'function') {
                    _this[item.name] = function () {
                        var params = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            params[_i] = arguments[_i];
                        }
                        return __awaiter(_this, void 0, void 0, function () {
                            var gasConfig, paramLen, keys_1, i, eip1559Keys, keys, isGasConfigured, i, i;
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        gasConfig = undefined;
                                        paramLen = params.length;
                                        if (params !== undefined
                                            && paramLen > 0
                                            && typeof params[paramLen - 1] === 'object'
                                            && params[paramLen - 1].constructor.name === 'Object'
                                            && (0, config_1.isVeridaWeb3GasConfiguration)(params[paramLen - 1])) { // Use gas configuration in the params
                                            gasConfig = params[paramLen - 1];
                                            params = params.slice(0, paramLen - 1);
                                        }
                                        else if (((_a = this.web3Config) === null || _a === void 0 ? void 0 : _a.methodDefaults) !== undefined && (item.name in ((_b = this.web3Config) === null || _b === void 0 ? void 0 : _b.methodDefaults))) {
                                            // Use gas configuration in the methodDefaults
                                            gasConfig = Object.assign({}, this.web3Config.methodDefaults[item.name]);
                                        }
                                        else if (this.web3Config !== undefined && (0, config_1.isVeridaWeb3GasConfiguration)(this.web3Config)) {
                                            keys_1 = ['eip1559Mode', 'eip1559gasStationUrl', 'maxFeePerGas', 'maxPriorityFeePerGas', 'gasLimit', 'gasPrice'];
                                            gasConfig = {};
                                            for (i = 0; i < keys_1.length; i++) {
                                                if (keys_1[i] in this.web3Config) {
                                                    gasConfig[keys_1[i]] = this.web3Config[keys_1[i]];
                                                }
                                            }
                                        }
                                        // console.log('vda-web3 gasconfig : ', gasConfig);
                                        if (gasConfig === undefined || Object.keys(gasConfig).length === 0) {
                                            // Call transaction without gas configuration
                                            return [2 /*return*/, this.callMethod(item.name, item.stateMutability, params)];
                                        }
                                        eip1559Keys = ['eip1559Mode', 'eip1559gasStationUrl'];
                                        keys = ['maxFeePerGas', 'maxPriorityFeePerGas', 'gasLimit', 'gasPrice'];
                                        isGasConfigured = false;
                                        for (i = 0; i < keys.length; i++) {
                                            if (keys[i] in gasConfig) {
                                                isGasConfigured = true;
                                                break;
                                            }
                                        }
                                        if (!isGasConfigured) return [3 /*break*/, 1];
                                        // Remove unnecessary EIP1559 keys if exist in the gas config
                                        for (i = 0; i < eip1559Keys.length; i++) {
                                            if (eip1559Keys[i] in gasConfig) {
                                                delete gasConfig[eip1559Keys[i]];
                                            }
                                        }
                                        return [3 /*break*/, 4];
                                    case 1:
                                        if (!('eip1559Mode' in gasConfig && 'eip1559gasStationUrl' in gasConfig)) return [3 /*break*/, 3];
                                        return [4 /*yield*/, (0, utils_1.getMaticFee)(gasConfig['eip1559gasStationUrl'], gasConfig['eip1559Mode'])];
                                    case 2:
                                        gasConfig = _c.sent();
                                        return [3 /*break*/, 4];
                                    case 3: throw new Error('To use the station gas configuration, need to specify eip1559Mode & eip1559gasStationUrl');
                                    case 4: return [2 /*return*/, this.callMethod(item.name, item.stateMutability, params, gasConfig)];
                                }
                            });
                        });
                    };
                }
            });
            this.web3Config = web3Config;
        }
        else {
            if (!(0, utils_1.isVeridaContract)(config.address)) {
                throw new Error("Not a Verida contract address (".concat(config.address, ")"));
            }
            if (!config.serverConfig) {
                throw new Error('Need request config');
            }
            this.gaslessServerConfig = config.serverConfig;
            if (!config.postConfig) {
                throw new Error('Need POST config');
            }
            this.gaslessPostConfig = config.postConfig;
            // @ts-ignore Unsure why the OR typescript isn't being picked up here
            this.endPoint = "".concat(config.endpointUrl, "/").concat(config.abi.contractName);
            var methods = config.abi.abi;
            methods.forEach(function (item) {
                if (item.type === 'function') {
                    // let params = ''
                    var paramIndex_1 = 1;
                    var parameterNameList_1 = new Array();
                    item.inputs.forEach(function (param) {
                        if (param.name === '') {
                            parameterNameList_1.push('param_' + paramIndex_1);
                            paramIndex_1++;
                        }
                        else {
                            parameterNameList_1.push(param.name);
                        }
                    });
                    _this[item.name] = function () {
                        var params = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            params[_i] = arguments[_i];
                        }
                        return __awaiter(_this, void 0, void 0, function () {
                            var paramObj, i;
                            return __generator(this, function (_a) {
                                // console.log("Parameters : ", ...params)
                                if (params.length !== parameterNameList_1.length) {
                                    throw new Error('Parameter count not matched');
                                }
                                paramObj = {};
                                for (i = 0; i < parameterNameList_1.length; i++) {
                                    paramObj[parameterNameList_1[i]] = params[i];
                                }
                                return [2 /*return*/, this.callMethod(item.name, item.stateMutability, this.type === 'web3' ? params : paramObj)];
                            });
                        });
                    };
                }
            });
        }
    }
    /**
     * Connect signer to contract to sign transactions. Called in web3 mode only
     *
     * @param controller : Wallet public address
     */
    VeridaContract.prototype.attachContract = function (controller) {
        return __awaiter(this, void 0, void 0, function () {
            var signer, currentOwner;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.type !== 'web3') {
                            throw new Error('Only call in web3 mode');
                        }
                        signer = this.signer;
                        if (!(signer === undefined && controller)) return [3 /*break*/, 2];
                        return [4 /*yield*/, controller];
                    case 1:
                        currentOwner = _a.sent();
                        signer = this.contract.provider.getSigner(currentOwner) || this.contract.signer;
                        _a.label = 2;
                    case 2:
                        if (!signer) {
                            throw new Error('Can not get signer with current configuration');
                        }
                        return [2 /*return*/, this.contract.connect(signer)];
                }
            });
        });
    };
    return VeridaContract;
}());
exports.VeridaContract = VeridaContract;
//# sourceMappingURL=VeridaContractBase.js.map