import { Contract } from 'ethers';
import { Provider } from '@ethersproject/providers';
import { BlockchainAnchor, Web3ContractInfo } from '@verida/types';
/**
 * Should contain provider
 * { provider: <provider instance> }
 *
 * Otherwise, this configuration should contain rpcUrl, and one of `blockchainAnchor` and `chainId`
 * ex: { rpcUrl: <RPC_URL>, blockchainAnchor: BlockchainAnchor.POLAMOY}
 * ex: { rpcUrl: <RPC_URL>, chainId: '0x89'}
 *
 * @param provider Provider supported by `ethers`
 * @param rpcUrl RPC that is used in blockchain transactions
 * @param blockchainAnchor Verida supported blockchain {@link BlockchainAnchor}
 * @param chainId Blockchain Id. ex: `0x89` for Polygon mainnet
 */
export interface ProviderConfiguration {
    provider?: Provider;
    rpcUrl?: string;
    blockchainAnchor?: BlockchainAnchor;
    chainId?: string | number;
}
/**
 * Check whether parameter contains gas configuration option
 * @param obj parameter to be checked
 * @returns true if contains, otherwise false
 */
export declare function isVeridaWeb3GasConfiguration(obj: Object): boolean;
/**
 * Returns Contract class instance of ethers library
 * This is used in web3 mode only - self transaction mode.
 *
 * @param conf Provider configuration to
 * @returns Contract instance
 */
export declare function getContractInstance(conf: ProviderConfiguration & Web3ContractInfo): Contract;
