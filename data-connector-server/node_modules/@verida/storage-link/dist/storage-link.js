"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var did_document_1 = require("@verida/did-document");
var types_1 = require("@verida/types");
var Url = require('url-parse');
/**
 * Class representing the link between a DID and Storage context
 */
var StorageLink = /** @class */ (function () {
    function StorageLink() {
    }
    // @todo: cache
    StorageLink.getLinks = function (network, didClient, did) {
        return __awaiter(this, void 0, void 0, function () {
            var didDocument, isLegacyDid, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!did) {
                            return [2 /*return*/, []];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, didClient.get(did)];
                    case 2:
                        didDocument = _a.sent();
                        isLegacyDid = (didDocument.export().id != did);
                        return [2 /*return*/, StorageLink.buildSecureContexts(didDocument, network, isLegacyDid)];
                    case 3:
                        err_1 = _a.sent();
                        // DID not found
                        return [2 /*return*/, []];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     *
     * @param didClient
     * @param did
     * @param contextName
     * @returns SecureStorageContextConfig | undefined (if not found)
     */
    StorageLink.getLink = function (network, didClient, did, context, contextIsName) {
        if (contextIsName === void 0) { contextIsName = true; }
        return __awaiter(this, void 0, void 0, function () {
            var secureContexts, contextHash, secureContext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, StorageLink.getLinks(network, didClient, did)];
                    case 1:
                        secureContexts = _a.sent();
                        contextHash = context;
                        if (contextIsName) {
                            if (secureContexts.length && secureContexts[0].isLegacyDid) {
                                did = did.replace('polpos', 'mainnet');
                            }
                            contextHash = did_document_1.DIDDocument.generateContextHash(did, context);
                        }
                        secureContext = StorageLink._findHash(secureContexts, contextHash);
                        return [2 /*return*/, secureContext];
                }
            });
        });
    };
    /**
     *
     * @param didClient
     * @param storageConfig (Must have .id as the contextName)
     */
    StorageLink.setLink = function (network, didClient, storageConfig, keyring, privateKey) {
        return __awaiter(this, void 0, void 0, function () {
            var did, didDocument, existing, err_2, isLegacyDid, endpoints;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        did = didClient.getDid();
                        if (!did) {
                            throw new Error("DID client is not authenticated");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        return [4 /*yield*/, didClient.get(did)
                            // Remove existing context if it exists
                        ];
                    case 2:
                        didDocument = _a.sent();
                        return [4 /*yield*/, StorageLink.getLink(network, didClient, did, storageConfig.id)];
                    case 3:
                        existing = _a.sent();
                        if (!existing) return [3 /*break*/, 5];
                        return [4 /*yield*/, StorageLink.unlink(network, didClient, storageConfig.id)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        err_2 = _a.sent();
                        // DID document not found
                        didDocument = new did_document_1.DIDDocument(did, didClient.getPublicKey());
                        return [3 /*break*/, 7];
                    case 7:
                        isLegacyDid = (didDocument.export().id != did);
                        if (isLegacyDid) {
                            did.replace('polpos', 'mainnet');
                        }
                        endpoints = {
                            database: storageConfig.services.databaseServer,
                            messaging: storageConfig.services.messageServer
                        };
                        if (storageConfig.services.storageServer) {
                            endpoints.storage = storageConfig.services.storageServer;
                        }
                        if (storageConfig.services.notificationServer) {
                            endpoints.notification = storageConfig.services.notificationServer;
                        }
                        return [4 /*yield*/, didDocument.addContext(network, storageConfig.id, keyring, privateKey, endpoints)];
                    case 8:
                        _a.sent();
                        return [4 /*yield*/, didClient.save(didDocument)];
                    case 9: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    StorageLink.setContextService = function (network, didClient, contextName, endpointType, serverType, endpointUris) {
        return __awaiter(this, void 0, void 0, function () {
            var did, didDocument, err_3, contextHash;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        did = didClient.getDid();
                        if (!did) {
                            throw new Error("DID client is not authenticated");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, didClient.get(did)];
                    case 2:
                        didDocument = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_3 = _a.sent();
                        // document not found
                        throw new Error("DID Document doesn't exist for this context");
                    case 4:
                        contextHash = did_document_1.DIDDocument.generateContextHash(did, contextName);
                        // Add the context service
                        return [4 /*yield*/, didDocument.addContextService(network, contextHash, endpointType, serverType, StorageLink.standardizeUrls(endpointUris))];
                    case 5:
                        // Add the context service
                        _a.sent();
                        return [2 /*return*/, didClient.save(didDocument)];
                }
            });
        });
    };
    StorageLink.unlink = function (network, didClient, contextName) {
        return __awaiter(this, void 0, void 0, function () {
            var did, didDocument, err_4, success;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        did = didClient.getDid();
                        if (!did) {
                            throw new Error("DID Client is not authenticated");
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, didClient.get(did)];
                    case 2:
                        didDocument = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        // DID document not found
                        return [2 /*return*/, false];
                    case 4: return [4 /*yield*/, didDocument.removeContext(contextName, network)];
                    case 5:
                        success = _a.sent();
                        if (!success) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, didClient.save(didDocument)];
                    case 6: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    StorageLink._findHash = function (contexts, hash) {
        for (var i in contexts) {
            if (contexts[i].id == hash) {
                return contexts[i];
            }
        }
    };
    StorageLink.buildSecureContexts = function (didDocument, network, isLegacyDid) {
        var _a;
        var doc = didDocument.export();
        var did = doc.id;
        var networkString = network ? "network=".concat(network.toString(), "&") : '';
        var returnLegacyContexts = false;
        // strategy: loop through all signing keys as our way of looping through all contexts
        var contexts = [];
        (_a = doc.keyAgreement) === null || _a === void 0 ? void 0 : _a.map(function (value) {
            var assertionParts = Url(value, true);
            if (!assertionParts.query || !assertionParts.query.context) {
                return;
            }
            var contextHash = assertionParts.query.context;
            // Get signing key
            var signKeyVerificationMethod = doc.verificationMethod.find(function (entry) { return entry.id == "".concat(did, "?").concat(networkString, "context=").concat(contextHash, "&type=sign"); });
            if (!signKeyVerificationMethod) {
                return;
            }
            var signKey = signKeyVerificationMethod.publicKeyHex;
            // Get asym key
            var asymKeyVerificationMethod = doc.verificationMethod.find(function (entry) { return entry.id == "".concat(did, "?").concat(networkString, "context=").concat(contextHash, "&type=asym"); });
            if (!asymKeyVerificationMethod) {
                return;
            }
            var asymKey = asymKeyVerificationMethod.publicKeyHex;
            // Get services
            var databaseService = doc.service.find(function (entry) { return entry.id == "".concat(did, "?").concat(networkString, "context=").concat(contextHash, "&type=database"); });
            var messageService = doc.service.find(function (entry) { return entry.id == "".concat(did, "?").concat(networkString, "context=").concat(contextHash, "&type=messaging"); });
            var storageService = doc.service.find(function (entry) { return entry.id == "".concat(did, "?").concat(networkString, "context=").concat(contextHash, "&type=storage"); });
            var notificationService = doc.service.find(function (entry) { return entry.id == "".concat(did, "?").concat(networkString, "context=").concat(contextHash, "&type=notification"); });
            // Valid we have everything
            if (!signKey || !asymKey || !databaseService || !messageService) {
                return;
            }
            // Build complete config
            var config = {
                id: contextHash,
                publicKeys: {
                    signKey: {
                        type: "EcdsaSecp256k1VerificationKey2019",
                        publicKeyHex: "0x".concat(signKey)
                    },
                    asymKey: {
                        type: "Curve25519EncryptionPublicKey",
                        publicKeyHex: "0x".concat(asymKey)
                    }
                },
                services: {
                    databaseServer: {
                        type: databaseService.type,
                        endpointUri: StorageLink.standardizeUrls(databaseService.serviceEndpoint)
                    },
                    messageServer: {
                        type: messageService.type,
                        endpointUri: StorageLink.standardizeUrls(messageService.serviceEndpoint)
                    }
                },
                isLegacyDid: isLegacyDid ? true : false
            };
            if (storageService) {
                config.services.storageServer = {
                    type: storageService.type,
                    endpointUri: StorageLink.standardizeUrls(storageService.serviceEndpoint)
                };
            }
            if (notificationService) {
                config.services.notificationServer = {
                    type: notificationService.type,
                    endpointUri: StorageLink.standardizeUrls(notificationService.serviceEndpoint)
                };
            }
            contexts.push(config);
        });
        if (networkString && network == types_1.Network.MYRTLE) {
            // Old Myrtle DID's don't specify the network, so if we have Myrtle
            // network, attempt to find context config that has no network specified
            var legacyContexts = StorageLink.buildSecureContexts(didDocument, undefined, isLegacyDid);
            contexts.push.apply(contexts, legacyContexts);
        }
        return contexts;
    };
    /**
     * Ensure the URL has a trailing slash and appropriate port set
     *
     * @param endpoint ServiceEndpoint | ServiceEndpoint[]
     * @returns
     */
    StorageLink.standardizeUrls = function (endpoints) {
        var finalEndpoints = [];
        for (var i in endpoints) {
            var url = new Url(endpoints[i]);
            var port = url.port ? url.port : (url.protocol == 'https:' ? 443 : 80);
            finalEndpoints.push("".concat(url.protocol, "//").concat(url.hostname, ":").concat(port, "/"));
        }
        return finalEndpoints;
    };
    return StorageLink;
}());
exports.default = StorageLink;
//# sourceMappingURL=storage-link.js.map