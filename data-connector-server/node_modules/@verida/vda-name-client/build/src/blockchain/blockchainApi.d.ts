import { VdaClientConfig } from '@verida/types';
import { VeridaClientBase } from '@verida/vda-client-base';
export declare class VeridaNameClient extends VeridaClientBase {
    protected usernameCache: Record<string, string>;
    constructor(config: VdaClientConfig);
    /**
     * Get a nonce from DIDRegistry contract
     * @returns nonce of DID
     */
    nonceFN(): Promise<any>;
    /**
     * Get a signature for {@link BlockchainApi#register} function
     * @param name Name to register
     * @param did DID address
     * @param signKey Verida account key to generate signature
     * @returns Signature
     */
    private getRegisterSignature;
    /**
     * Register a username to the did address
     * @param username Name to register
     */
    register(username: string): Promise<void>;
    /**
     * Unregister a username from the did address
     * @param username Name to be unregistered
     */
    unregister(username: string): Promise<void>;
    /**
     * Get the username list of a DID address
     *
     * @param did DID to lookup the username for
     * @returns username list
     */
    getUsernames(did: string): Promise<string[]>;
    /**
     * Return the DID address for a given username
     *
     * @param username username registered by {@link register}
     * @returns DID address
     */
    getDID(username: string): Promise<string>;
    /**
     * Return limit of names per DID
     * @returns Limit of names
     */
    getNameLimitPerDID(): Promise<string>;
}
