"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VeridaNameClient = void 0;
var ethers_1 = require("ethers");
var vda_common_1 = require("@verida/vda-common");
var helpers_1 = require("@verida/helpers");
var vda_client_base_1 = require("@verida/vda-client-base");
var VeridaNameClient = /** @class */ (function (_super) {
    __extends(VeridaNameClient, _super);
    function VeridaNameClient(config) {
        var _this = _super.call(this, config, "nameRegistry") || this;
        _this.usernameCache = {};
        return _this;
    }
    /**
     * Get a nonce from DIDRegistry contract
     * @returns nonce of DID
     */
    VeridaNameClient.prototype.nonceFN = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.vdaWeb3Client) {
                            throw new Error("Config must specify 'did' or 'signKey'");
                        }
                        return [4 /*yield*/, this.vdaWeb3Client.nonce(this.didAddress)];
                    case 1:
                        response = _a.sent();
                        if (response.data === undefined) {
                            throw new Error('Error in getting nonce');
                        }
                        return [2 /*return*/, response.data];
                }
            });
        });
    };
    /**
     * Get a signature for {@link BlockchainApi#register} function
     * @param name Name to register
     * @param did DID address
     * @param signKey Verida account key to generate signature
     * @returns Signature
     */
    VeridaNameClient.prototype.getRegisterSignature = function (name, did, signKey) {
        return __awaiter(this, void 0, void 0, function () {
            var rawMsg, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        rawMsg = ethers_1.ethers.utils.solidityPack(['string', 'address'], [name, did]);
                        _a = vda_common_1.getVeridaSignWithNonce;
                        _b = [rawMsg, signKey];
                        return [4 /*yield*/, this.nonceFN()];
                    case 1: return [2 /*return*/, _a.apply(void 0, _b.concat([_c.sent()]))];
                }
            });
        });
    };
    ;
    /**
     * Register a username to the did address
     * @param username Name to register
     */
    VeridaNameClient.prototype.register = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var signature, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.readOnly) {
                            throw new Error("Unable to submit to blockchain. No 'signKey' provided in config.");
                        }
                        if (!this.config.signKey) {
                            throw new Error("Unable to submit to blockchain. No 'signKey' provided in config.");
                        }
                        username = username.toLowerCase();
                        return [4 /*yield*/, this.getRegisterSignature(username, this.didAddress, this.config.signKey)];
                    case 1:
                        signature = _a.sent();
                        return [4 /*yield*/, this.vdaWeb3Client.register(username, this.didAddress, signature)];
                    case 2:
                        response = _a.sent();
                        if (response.success !== true) {
                            throw new Error("Failed to register: ".concat(response.reason));
                        }
                        this.usernameCache[username] = "did:vda:".concat(this.blockchainAnchor, ":").concat(this.didAddress);
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Unregister a username from the did address
     * @param username Name to be unregistered
     */
    VeridaNameClient.prototype.unregister = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var signature, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.readOnly || !this.config.signKey) {
                            throw new Error("Unable to submit to blockchain. In read only mode.");
                        }
                        username = username.toLowerCase();
                        return [4 /*yield*/, this.getRegisterSignature(username, this.didAddress, this.config.signKey)];
                    case 1:
                        signature = _a.sent();
                        return [4 /*yield*/, this.vdaWeb3Client.unregister(username, this.didAddress, signature)];
                    case 2:
                        response = _a.sent();
                        if (response.success !== true) {
                            throw new Error("Failed to unregister username: ".concat(username, " (").concat(response.reason, ")"));
                        }
                        delete this.usernameCache[username];
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get the username list of a DID address
     *
     * @param did DID to lookup the username for
     * @returns username list
     */
    VeridaNameClient.prototype.getUsernames = function (did) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var response, didAddress, address, usernames, err_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        didAddress = did.toLowerCase();
                        if (didAddress.match('did')) {
                            address = (0, helpers_1.explodeDID)(did).address;
                            didAddress = address;
                        }
                        usernames = Object.entries(this.usernameCache)
                            .filter(function (_a) {
                            var existingDid = _a[1];
                            return existingDid === did;
                        })
                            .map(function (_a) {
                            var username = _a[0], existingDid = _a[1];
                            return username;
                        });
                        if (usernames.length) {
                            return [2 /*return*/, usernames];
                        }
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 6, , 7]);
                        if (!this.vdaWeb3Client) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.vdaWeb3Client.getUserNameList(didAddress)];
                    case 2:
                        response = _c.sent();
                        if (response.success !== true) {
                            if (((_a = response.errorObj) === null || _a === void 0 ? void 0 : _a.errorName) === 'InvalidAddress') {
                                return [2 /*return*/, []];
                            }
                            throw new Error(response.reason);
                        }
                        return [2 /*return*/, response.data];
                    case 3: return [4 /*yield*/, this.contract.callStatic.getUserNameList(didAddress)];
                    case 4:
                        response = _c.sent();
                        return [2 /*return*/, response];
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        err_1 = _c.sent();
                        if (((_b = err_1.errorObj) === null || _b === void 0 ? void 0 : _b.errorName) === 'InvalidAddress' || err_1.errorName === 'InvalidAddress') {
                            return [2 /*return*/, []];
                        }
                        throw new Error("Failed to get usernames for DID: ".concat(didAddress, " (").concat(err_1.message, ")"));
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Return the DID address for a given username
     *
     * @param username username registered by {@link register}
     * @returns DID address
     */
    VeridaNameClient.prototype.getDID = function (username) {
        return __awaiter(this, void 0, void 0, function () {
            var response, did, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        username = username.toLowerCase();
                        if (this.usernameCache[username]) {
                            return [2 /*return*/, this.usernameCache[username]];
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        if (!this.vdaWeb3Client) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.vdaWeb3Client.findDID(username)];
                    case 2:
                        response = _a.sent();
                        if (response.success !== true) {
                            throw new Error("Not found");
                        }
                        response = response.data;
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.contract.callStatic.findDID(username)];
                    case 4:
                        response = _a.sent();
                        if (!response) {
                            throw new Error("Not found");
                        }
                        _a.label = 5;
                    case 5:
                        did = "did:vda:".concat(this.blockchainAnchor, ":").concat(response);
                        this.usernameCache[username] = did;
                        return [2 /*return*/, did];
                    case 6:
                        err_2 = _a.sent();
                        throw new Error("Failed to locate the DID for username: ".concat(username, " (").concat(err_2.message, ")"));
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Return limit of names per DID
     * @returns Limit of names
     */
    VeridaNameClient.prototype.getNameLimitPerDID = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, err_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 5, , 6]);
                        if (!this.vdaWeb3Client) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.vdaWeb3Client.maxNamesPerDID()];
                    case 1:
                        response = _a.sent();
                        if (response.success !== true) {
                            throw new Error("Failed to get limit of names per DID");
                        }
                        response = response.data;
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.contract.callStatic.maxNamesPerDID()];
                    case 3:
                        response = _a.sent();
                        if (!response) {
                            throw new Error("Failed to get limit of names per DID");
                        }
                        _a.label = 4;
                    case 4: return [2 /*return*/, response];
                    case 5:
                        err_3 = _a.sent();
                        throw new Error("Failed to get limit of names: (".concat(err_3.message, ")"));
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    return VeridaNameClient;
}(vda_client_base_1.VeridaClientBase));
exports.VeridaNameClient = VeridaNameClient;
//# sourceMappingURL=blockchainApi.js.map