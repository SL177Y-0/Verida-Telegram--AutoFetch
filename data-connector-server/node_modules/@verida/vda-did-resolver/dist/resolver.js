"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VdaDidResolver = exports.getResolver = void 0;
var axios_1 = __importDefault(require("axios"));
var lookup_1 = require("./lookup");
var did_document_1 = require("@verida/did-document");
var vda_common_1 = require("@verida/vda-common");
/**
 * Create a VdaDidResolver instance and return it
 * @param options Configurations
 * @returns VdaDidResolver instance
 */
function getResolver(options) {
    options = !options ? {} : options;
    return new VdaDidResolver(options).build();
}
exports.getResolver = getResolver;
var VdaDidResolver = /** @class */ (function () {
    function VdaDidResolver(options) {
        this.defaultTimeout = 10000;
        this.options = options;
    }
    /** Resolve a DIDDocument from a DID */
    VdaDidResolver.prototype.resolve = function (did, parsed, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    _unused, options) {
        return __awaiter(this, void 0, void 0, function () {
            var didDetails, didDoc, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        didDetails = (0, vda_common_1.interpretIdentifier)(did);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this._resolve(didDetails)
                            // Return the DIDResolutionResult object
                        ];
                    case 2:
                        didDoc = _a.sent();
                        // Return the DIDResolutionResult object
                        return [2 /*return*/, {
                                didResolutionMetadata: { contentType: 'application/did+ld+json' },
                                didDocument: didDoc,
                                didDocumentMetadata: {}
                            }];
                    case 3:
                        err_1 = _a.sent();
                        if (err_1.message == 'DID Document not found: No valid documents on endpoints') {
                            return [2 /*return*/, {
                                    didDocument: null,
                                    didDocumentMetadata: {},
                                    didResolutionMetadata: { error: 'notFound' },
                                }];
                        }
                        throw err_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Resolve a DID Document
     *
     * For performance, the latest version is fetched from endpoint. It is possible to fetch all versions
     * and verify them by using the `fullVerification` query param.
     *
     * Supports query parameters:
     *
     * `timestamp`: Return DID document that was valid at the specified timestamp
     * `fullVerification`: Verify every copy of the DID document instead of using consensus
     *
     * @param parsed
     */
    VdaDidResolver.prototype._resolve = function (parsed) {
        return __awaiter(this, void 0, void 0, function () {
            var rpcUrl, endpoints, err_2, didDocuments;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rpcUrl = this.options.rpcUrl ? this.options.rpcUrl : vda_common_1.RPC_URLS[parsed.network];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, (0, lookup_1.lookup)(parsed.address, parsed.network, rpcUrl)];
                    case 2:
                        endpoints = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        err_2 = _a.sent();
                        if (err_2.message === 'DID not found') {
                            throw new Error("DID Document not found: No valid documents on endpoints");
                        }
                        throw err_2;
                    case 4: return [4 /*yield*/, this.fetchDocuments(endpoints)];
                    case 5:
                        didDocuments = _a.sent();
                        if (didDocuments.length == 0) {
                            throw new Error("DID Document not found: No valid documents on endpoints");
                        }
                        // @todo: support consensus
                        // @todo: support proof verification
                        // For now return the first doc
                        return [2 /*return*/, didDocuments[0]];
                }
            });
        });
    };
    /**
     * Fetch the latest DIDDocument stored at each endpoint
     *
     * @param endpoints
     */
    VdaDidResolver.prototype.fetchDocuments = function (endpoints) {
        return __awaiter(this, void 0, void 0, function () {
            var documents, _a, _b, _c, _i, i, endpointUri, response, doc, err_3;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        documents = [];
                        _a = endpoints;
                        _b = [];
                        for (_c in _a)
                            _b.push(_c);
                        _i = 0;
                        _d.label = 1;
                    case 1:
                        if (!(_i < _b.length)) return [3 /*break*/, 6];
                        _c = _b[_i];
                        if (!(_c in _a)) return [3 /*break*/, 5];
                        i = _c;
                        endpointUri = endpoints[i];
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, axios_1.default.get(endpointUri, {
                                timeout: this.options.timeout ? this.options.timeout : this.defaultTimeout
                            })];
                    case 3:
                        response = _d.sent();
                        if (response.data.status == 'success') {
                            doc = new did_document_1.DIDDocument(response.data.data);
                            doc.import(response.data.data);
                            documents.push(doc.export());
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        err_3 = _d.sent();
                        return [3 /*break*/, 5];
                    case 5:
                        _i++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/, documents];
                }
            });
        });
    };
    VdaDidResolver.prototype.build = function () {
        return { vda: this.resolve.bind(this) };
    };
    return VdaDidResolver;
}());
exports.VdaDidResolver = VdaDidResolver;
//# sourceMappingURL=resolver.js.map