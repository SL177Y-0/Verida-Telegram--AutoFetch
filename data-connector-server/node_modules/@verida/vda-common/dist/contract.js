"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContractInfoForBlockchainAnchor = exports.BLOCKCHAIN_CHAINIDS = exports.getNetworkFromString = exports.NETWORK_DEFINITIONS = exports.CHAIN_CONTRACTS = exports.CONTRACT_ABI = void 0;
var types_1 = require("@verida/types");
exports.CONTRACT_ABI = {
    didRegistry: require('./abi/VeridaDIDRegistry.json'),
    nameRegistry: require('./abi/NameRegistry.json'),
    didLinkage: require('./abi/VeridaDIDLinkage.json'),
    token: require('./abi/VeridaToken.json'),
    reward: require('./abi/VDARewardContract.json'),
    storageNodeRegistry: require('./abi/StorageNodeRegistry.json'),
    solboundNFT: require('./abi/SoulboundNFT.json'),
};
/**
 * Contract information for each `BlockchainAnchor` type
 */
exports.CHAIN_CONTRACTS = {
    polpos: {
        token: {
            address: "0x683565196C3EAb450003C964D4bad1fd3068D4cC",
            abi: exports.CONTRACT_ABI["token"]
        },
        didRegistry: {
            address: "0x6FF180EF62FA57e611E91bdDaDadB6635D6b9Af7",
            abi: exports.CONTRACT_ABI["didRegistry"]
        },
        storageNodeRegistry: null,
        nameRegistry: {
            address: "0xc9ce048b464034C53207Bf120bF85f317fdb38C8",
            abi: exports.CONTRACT_ABI["nameRegistry"]
        },
        didLinkage: {
            address: "0x5916F97e31B77884d81bdA875b7686A988E0d517",
            abi: exports.CONTRACT_ABI["didLinkage"]
        },
        reward: null,
        solboundNFT: null
    },
    polamoy: {
        token: {
            address: "0xC3D1eB4E0241a4A2B859f91dd2a6aDA176cCB6F2",
            abi: exports.CONTRACT_ABI["token"]
        },
        didRegistry: {
            address: "0x5CC5cf757C0f2af7b3935093F88EaF45c5210002",
            abi: exports.CONTRACT_ABI["didRegistry"]
        },
        storageNodeRegistry: {
            address: "0xb19197875f4e76db9565c32E98e588F6A215ceb5",
            abi: exports.CONTRACT_ABI["storageNodeRegistry"]
        },
        nameRegistry: {
            address: "0x91381c424485dc12650811601d9a8B0025e51afc",
            abi: exports.CONTRACT_ABI["nameRegistry"]
        },
        didLinkage: {
            address: "0x3A2439746D84bF4a8416fAfbF9C864Fc380BA23B",
            abi: exports.CONTRACT_ABI["didLinkage"]
        },
        reward: {
            address: "0x4BDf0193aF01dF6b6Ff14A97eECE42071575d706",
            abi: exports.CONTRACT_ABI["reward"]
        },
        solboundNFT: {
            address: "0xa7D552ccc8E561164d26711516033bcdeD975ca3",
            abi: exports.CONTRACT_ABI["solboundNFT"]
        }
    }
};
exports.NETWORK_DEFINITIONS = (_a = {},
    _a[types_1.Network.MYRTLE] = __assign({ id: types_1.Network.MYRTLE, label: "Myrtle", isMainnet: true, anchoredBlockchain: types_1.BlockchainAnchor.POLPOS }, exports.CHAIN_CONTRACTS[types_1.BlockchainAnchor.POLPOS]),
    _a[types_1.Network.BANKSIA] = __assign({ id: types_1.Network.BANKSIA, label: "Banksia", isMainnet: false, anchoredBlockchain: types_1.BlockchainAnchor.POLAMOY }, exports.CHAIN_CONTRACTS[types_1.BlockchainAnchor.POLAMOY]),
    _a[types_1.Network.DEVNET] = __assign({ id: types_1.Network.DEVNET, label: "Devnet", isMainnet: false, anchoredBlockchain: types_1.BlockchainAnchor.POLAMOY }, exports.CHAIN_CONTRACTS[types_1.BlockchainAnchor.POLAMOY]),
    _a[types_1.Network.LOCAL] = __assign({ id: types_1.Network.LOCAL, label: "Local", isMainnet: false, anchoredBlockchain: types_1.BlockchainAnchor.POLAMOY }, exports.CHAIN_CONTRACTS[types_1.BlockchainAnchor.POLAMOY]),
    _a);
function getNetworkFromString(networkName) {
    return types_1.Network[networkName.toUpperCase()];
}
exports.getNetworkFromString = getNetworkFromString;
exports.BLOCKCHAIN_CHAINIDS = (_b = {},
    _b[types_1.BlockchainAnchor.POLPOS] = '0x89',
    _b[types_1.BlockchainAnchor.POLAMOY] = '0x13882',
    _b);
/**
 * Return the contract information for given `BlockchainAnchor`
 * @param blockchainAnchor Target chain that Verida support {@link BlockchainAnchor}
 * @param contractName Contract name {@link TContractNames}
 */
function getContractInfoForBlockchainAnchor(blockchainAnchor, contractName) {
    return exports.CHAIN_CONTRACTS[blockchainAnchor][contractName];
}
exports.getContractInfoForBlockchainAnchor = getContractInfoForBlockchainAnchor;
//# sourceMappingURL=contract.js.map