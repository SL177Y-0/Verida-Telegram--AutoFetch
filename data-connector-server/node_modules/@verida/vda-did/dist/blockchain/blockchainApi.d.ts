import { VdaDidConfigurationOptions, Web3GasConfiguration } from "@verida/types";
export interface LookupResponse {
    didController: string;
    endpoints: string[];
}
export default class BlockchainApi {
    private options;
    private blockchain;
    private didAddress;
    private vdaWeb3Client;
    constructor(options: VdaDidConfigurationOptions);
    /**
     * Get a nonce from DIDRegistry contract
     * @returns nonce of DID
     */
    nonceFN(): Promise<any>;
    /**
     * Get a controller & Endpoints' array of a DID address fro blockchain
     * @returns Controller & Endpoints array
     */
    lookup(did: string): Promise<LookupResponse>;
    /**
     * Get a signature for {@link BlockchainApi#register} function
     * @param endpoints Array of endpoints to be registered
     * @returns Signature
     */
    private getRegisterSignature;
    /**
     * Register endpoints to blockchain
     * @param endpoints Array of endpoints to be registered
     */
    register(endpoints: string[], gasConfig?: Web3GasConfiguration): Promise<void>;
    /**
     * Get a signature for {@link BlockchainApi#setController} function
     * @param controller DID address of controller that will be set
     * @returns Signature
     */
    private getControllerSignature;
    /**
     * Set a controller of the {@link BlockchainApi#didAddress} to the blockchain
     * @param controllerPrivateKey private key of new controller
     */
    setController(controllerPrivateKey: string, gasConfig?: Web3GasConfiguration): Promise<void>;
    getController(): Promise<any>;
    /**
     * Get a signature for {@link BlockchainApi#revoke} function
     * @returns Signature
     */
    private getRevokeSignature;
    /**
     * Revoke a DID address from the blockchain
     */
    revoke(gasConfig?: Web3GasConfiguration): Promise<void>;
    /**
     * Get active DID count
     * @returns Number of active did count
     */
    activeDIDCount(): Promise<any>;
}
