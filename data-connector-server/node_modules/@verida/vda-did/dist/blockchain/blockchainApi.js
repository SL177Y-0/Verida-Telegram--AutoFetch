"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var vda_common_1 = require("@verida/vda-common");
var helpers_1 = require("./helpers");
var web3_1 = require("@verida/web3");
var ethers_1 = require("ethers");
var encryption_utils_1 = require("@verida/encryption-utils");
var vda_common_2 = require("@verida/vda-common");
var BlockchainApi = /** @class */ (function () {
    function BlockchainApi(options) {
        this.options = options;
        if (!this.options.signKey && !this.options.signer) {
            throw new Error("Invalid configuration. 'signKey' or 'signer' must be specified");
        }
        if (this.options.signKey && !this.options.signer) {
            this.options.signer = function (data) {
                var privateKeyArray = new Uint8Array(Buffer.from(options.signKey.slice(2), 'hex'));
                return Promise.resolve(encryption_utils_1.default.signData(data, privateKeyArray));
            };
        }
        var address = (0, vda_common_1.interpretIdentifier)(options.identifier).address;
        this.didAddress = address.toLowerCase();
        // @ts-ignore
        this.blockchain = options.blockchain;
        var contractInfo = (0, vda_common_1.getContractInfoForBlockchainAnchor)(this.blockchain, "didRegistry");
        // @ts-ignore
        if (options.callType == 'web3' && !options.web3Options.rpcUrl) {
            var defaultRPCUrl = (0, vda_common_2.getDefaultRpcUrl)(options.blockchain);
            if (!defaultRPCUrl) {
                throw new Error('Web3 transactions must specify `rpcUrl` in the configuration options');
            }
            options.web3Options.rpcUrl = defaultRPCUrl;
        }
        this.vdaWeb3Client = (0, web3_1.getVeridaContract)(options.callType, __assign(__assign(__assign({}, contractInfo), options.web3Options), { blockchainAnchor: this.blockchain }));
    }
    /**
     * Get a nonce from DIDRegistry contract
     * @returns nonce of DID
     */
    BlockchainApi.prototype.nonceFN = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.vdaWeb3Client.nonce(this.didAddress)];
                    case 1:
                        response = _a.sent();
                        if (response.data === undefined) {
                            throw new Error('Error in getting nonce');
                        }
                        return [2 /*return*/, response.data];
                }
            });
        });
    };
    /**
     * Get a controller & Endpoints' array of a DID address fro blockchain
     * @returns Controller & Endpoints array
     */
    BlockchainApi.prototype.lookup = function (did) {
        return __awaiter(this, void 0, void 0, function () {
            var didParts, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        didParts = (0, vda_common_1.interpretIdentifier)(did);
                        return [4 /*yield*/, this.vdaWeb3Client.lookup(didParts.address.toLowerCase())];
                    case 1:
                        response = _a.sent();
                        if (response.success !== true) {
                            throw new Error('DID not found');
                        }
                        return [2 /*return*/, {
                                didController: response.data[0],
                                endpoints: response.data[1]
                            }];
                }
            });
        });
    };
    /**
     * Get a signature for {@link BlockchainApi#register} function
     * @param endpoints Array of endpoints to be registered
     * @returns Signature
     */
    BlockchainApi.prototype.getRegisterSignature = function (endpoints) {
        return __awaiter(this, void 0, void 0, function () {
            var rawMsg, nonce, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        rawMsg = ethers_1.ethers.utils.solidityPack(['address', 'string'], [this.didAddress.toLowerCase(), '/']);
                        return [4 /*yield*/, this.nonceFN()];
                    case 1:
                        nonce = _a.sent();
                        for (i = 0; i < endpoints.length; i++) {
                            rawMsg = ethers_1.ethers.utils.solidityPack(['bytes', 'string', 'string'], [rawMsg, endpoints[i], '/']);
                        }
                        return [4 /*yield*/, (0, helpers_1.getVeridaSignWithNonce)(rawMsg, this.options.signer, nonce)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ;
    /**
     * Register endpoints to blockchain
     * @param endpoints Array of endpoints to be registered
     */
    BlockchainApi.prototype.register = function (endpoints, gasConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var signature, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.options.signer) {
                            throw new Error("Unable to create DID. No signer specified in config.");
                        }
                        return [4 /*yield*/, this.getRegisterSignature(endpoints)];
                    case 1:
                        signature = _a.sent();
                        if (!(gasConfig !== undefined)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.vdaWeb3Client.register(this.didAddress, endpoints, signature, gasConfig)];
                    case 2:
                        response = _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.vdaWeb3Client.register(this.didAddress, endpoints, signature)];
                    case 4:
                        response = _a.sent();
                        _a.label = 5;
                    case 5:
                        if (response.success !== true) {
                            throw new Error("Failed to register endpoints (".concat(response.error, ")"));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get a signature for {@link BlockchainApi#setController} function
     * @param controller DID address of controller that will be set
     * @returns Signature
     */
    BlockchainApi.prototype.getControllerSignature = function (controller) {
        return __awaiter(this, void 0, void 0, function () {
            var rawMsg, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        rawMsg = ethers_1.ethers.utils.solidityPack(['address', 'string', 'address', 'string'], [this.didAddress, '/setController/', controller, '/']);
                        _a = helpers_1.getVeridaSignWithNonce;
                        _b = [rawMsg, this.options.signer];
                        return [4 /*yield*/, this.nonceFN()];
                    case 1: return [4 /*yield*/, _a.apply(void 0, _b.concat([_c.sent()]))];
                    case 2: return [2 /*return*/, _c.sent()];
                }
            });
        });
    };
    ;
    /**
     * Set a controller of the {@link BlockchainApi#didAddress} to the blockchain
     * @param controllerPrivateKey private key of new controller
     */
    BlockchainApi.prototype.setController = function (controllerPrivateKey, gasConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var controllerAddress, signature, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.options.signer) {
                            throw new Error("Unable to create DID. No signer specified in config.");
                        }
                        controllerAddress = ethers_1.ethers.utils.computeAddress(controllerPrivateKey).toLowerCase();
                        return [4 /*yield*/, this.getControllerSignature(controllerAddress)];
                    case 1:
                        signature = _a.sent();
                        if (this.didAddress == controllerAddress) {
                            // Controller hasn't changed, so don't update on chain
                            return [2 /*return*/];
                        }
                        if (!(gasConfig !== undefined)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.vdaWeb3Client.setController(this.didAddress, controllerAddress, signature, gasConfig)];
                    case 2:
                        response = _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.vdaWeb3Client.setController(this.didAddress, controllerAddress, signature)];
                    case 4:
                        response = _a.sent();
                        _a.label = 5;
                    case 5:
                        if (response.success !== true) {
                            throw new Error('Failed to set controller');
                        }
                        this.options.signer = function (data) {
                            var privateKeyArray = new Uint8Array(Buffer.from(controllerPrivateKey.slice(2), 'hex'));
                            return Promise.resolve(encryption_utils_1.default.signData(data, privateKeyArray));
                        };
                        return [2 /*return*/];
                }
            });
        });
    };
    BlockchainApi.prototype.getController = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.vdaWeb3Client.getController(this.didAddress)];
                    case 1:
                        response = _a.sent();
                        if (response.success !== true) {
                            throw new Error('Failed to get controller');
                        }
                        return [2 /*return*/, response.data];
                }
            });
        });
    };
    /**
     * Get a signature for {@link BlockchainApi#revoke} function
     * @returns Signature
     */
    BlockchainApi.prototype.getRevokeSignature = function () {
        return __awaiter(this, void 0, void 0, function () {
            var rawMsg, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        rawMsg = ethers_1.ethers.utils.solidityPack(['address', 'string'], [this.didAddress.toLowerCase(), '/revoke/']);
                        _a = helpers_1.getVeridaSignWithNonce;
                        _b = [rawMsg, this.options.signer];
                        return [4 /*yield*/, this.nonceFN()];
                    case 1: return [4 /*yield*/, _a.apply(void 0, _b.concat([_c.sent()]))];
                    case 2: return [2 /*return*/, _c.sent()];
                }
            });
        });
    };
    ;
    /**
     * Revoke a DID address from the blockchain
     */
    BlockchainApi.prototype.revoke = function (gasConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var signature, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.options.signer) {
                            throw new Error("Unable to create DID. No signer specified in config.");
                        }
                        return [4 /*yield*/, this.getRevokeSignature()];
                    case 1:
                        signature = _a.sent();
                        if (!(gasConfig !== undefined)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.vdaWeb3Client.revoke(this.didAddress, signature, gasConfig)];
                    case 2:
                        response = _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.vdaWeb3Client.revoke(this.didAddress, signature)];
                    case 4:
                        response = _a.sent();
                        _a.label = 5;
                    case 5:
                        if (response.success !== true) {
                            throw new Error('Failed to revoke');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get active DID count
     * @returns Number of active did count
     */
    BlockchainApi.prototype.activeDIDCount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.vdaWeb3Client.activeDIDCount()];
                    case 1:
                        response = _a.sent();
                        if (response.success !== true) {
                            throw new Error('Failed to get active DID count');
                        }
                        return [2 /*return*/, response.data.toNumber()];
                }
            });
        });
    };
    return BlockchainApi;
}());
exports.default = BlockchainApi;
//# sourceMappingURL=blockchainApi.js.map